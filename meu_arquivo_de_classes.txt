// services/authService.ts
import api from './api';
import { JwtResponse, User, TokenRefreshResponse } from '@/types/auth';

class AuthService {
  async loginWithGoogle(idToken: string): Promise<JwtResponse> {
    try {
      const response = await api.post('/api/v1/auth/google', {
        idToken
      });
      
      const { token, refreshToken, ...userData } = response.data;
      
      // Salvar tokens
      localStorage.setItem('token', token);
      localStorage.setItem('refreshToken', refreshToken);
      localStorage.setItem('user', JSON.stringify(userData));
      
      return response.data;
    } catch (error: any) {
      console.error('Erro no login:', error);
      throw new Error(error.response?.data?.error?.message || 'Erro na autenticação');
    }
  }

  async logout(): Promise<void> {
    try {
      await api.post('/api/v1/auth/logout');
    } catch (error) {
      console.error('Erro no logout:', error);
    } finally {
      localStorage.removeItem('token');
      localStorage.removeItem('refreshToken');
      localStorage.removeItem('user');
      window.location.href = '/login';
    }
  }

  async getUserInfo(): Promise<User> {
    try {
      const response = await api.get('/api/v1/auth/me');
      return response.data;
    } catch (error) {
      console.error('Erro ao obter informações do usuário:', error);
      throw error;
    }
  }

  getCurrentUser(): User | null {
    const user = localStorage.getItem('user');
    return user ? JSON.parse(user) : null;
  }

  isAuthenticated(): boolean {
    return !!localStorage.getItem('token');
  }

  hasRole(role: string): boolean {
    const user = this.getCurrentUser();
    return user?.roles?.includes(role) || false;
  }
}

export default new AuthService();

// pages/_app.tsx
import '@/styles/globals.css';
import type { AppProps } from 'next/app';
import { GoogleOAuthProvider } from '@react-oauth/google';
import { Toaster } from 'react-hot-toast';
import { AuthProvider } from '@/hooks/useAuth';
import { QueryClient, QueryClientProvider } from 'react-query';
import { useState } from 'react';

function MyApp({ Component, pageProps }: AppProps) {
  const [queryClient] = useState(() => new QueryClient({
    defaultOptions: {
      queries: {
        retry: 1,
        refetchOnWindowFocus: false,
        staleTime: 5 * 60 * 1000, // 5 minutes
      },
    },
  }));

  return (
    <QueryClientProvider client={queryClient}>
      <GoogleOAuthProvider clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!}>
        <AuthProvider>
          <Component {...pageProps} />
          <Toaster
            position="top-right"
            toastOptions={{
              duration: 4000,
              style: {
                background: '#363636',
                color: '#fff',
              },
              success: {
                duration: 3000,
                theme: {
                  primary: 'green',
                  secondary: 'black',
                },
              },
            }}
          />
        </AuthProvider>
      </GoogleOAuthProvider>
    </QueryClientProvider>
  );
}

export default MyApp;

// pages/_document.tsx
import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html lang="pt-BR">
      <Head>
        <meta charSet="utf-8" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="description" content="TourApp - Sistema de Gerenciamento de Excursões" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

// components/Layout.tsx
import React, { ReactNode, useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import Link from 'next/link';
import { useRouter } from 'next/router';

interface LayoutProps {
  children: ReactNode;
  title?: string;
}

const Layout: React.FC<LayoutProps> = ({ children, title = 'TourApp' }) => {
  const { user, logout, hasRole } = useAuth();
  const router = useRouter();
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const handleLogout = async () => {
    await logout();
    router.push('/');
  };

  const navigation = [
    ...(hasRole('ROLE_ORGANIZADOR') ? [
      { name: 'Dashboard', href: '/organizador/dashboard' },
      { name: 'Excursões', href: '/organizador/excursoes' },
      { name: 'Inscrições', href: '/organizador/inscricoes' },
      { name: 'Notificações', href: '/organizador/notificacoes' },
    ] : []),
    ...(hasRole('ROLE_CLIENTE') ? [
      { name: 'Minhas Inscrições', href: '/cliente/inscricoes' },
      { name: 'Perfil', href: '/cliente/perfil' },
    ] : []),
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation */}
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex">
              <div className="flex-shrink-0 flex items-center">
                <Link href="/" className="text-xl font-bold text-gray-900">
                  TourApp
                </Link>
              </div>
              <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
                {navigation.map((item) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    className={`${
                      router.pathname === item.href
                        ? 'border-indigo-500 text-gray-900'
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}
                  >
                    {item.name}
                  </Link>
                ))}
              </div>
            </div>

            {/* User menu */}
            <div className="hidden sm:ml-6 sm:flex sm:items-center">
              {user ? (
                <div className="flex items-center space-x-4">
                  <span className="text-sm text-gray-700">
                    Olá, {user.name}
                  </span>
                  <button
                    onClick={handleLogout}
                    className="bg-white text-gray-400 hover:text-gray-600 px-3 py-2 rounded-md text-sm font-medium"
                  >
                    Sair
                  </button>
                </div>
              ) : (
                <Link
                  href="/login"
                  className="bg-indigo-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-indigo-700"
                >
                  Entrar
                </Link>
              )}// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  
  // Configuração de imagens para Cloudinary
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'res.cloudinary.com',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'lh3.googleusercontent.com',
        port: '',
        pathname: '/**',
      },
    ],
  },

  // Variáveis de ambiente públicas
  env: {
    NEXT_PUBLIC_GOOGLE_CLIENT_ID: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID,
    NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL,
  },

  // Configuração de headers CORS se necessário
  async headers() {
    return [
      {
        source: '/api/:path*',
        headers: [
          { key: 'Access-Control-Allow-Credentials', value: 'true' },
          { key: 'Access-Control-Allow-Origin', value: '*' },
          { key: 'Access-Control-Allow-Methods', value: 'GET,OPTIONS,PATCH,DELETE,POST,PUT' },
          { key: 'Access-Control-Allow-Headers', value: 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, Authorization' },
        ],
      },
    ];
  },
};

module.exports = nextConfig;

// .env.local
NEXT_PUBLIC_API_URL=https://seu-projeto-railway.up.railway.app
NEXT_PUBLIC_GOOGLE_CLIENT_ID=seu_google_client_id_aqui.apps.googleusercontent.com

// .env.example
NEXT_PUBLIC_API_URL=http://localhost:8080
NEXT_PUBLIC_GOOGLE_CLIENT_ID=your_google_client_id_here

// package.json (dependências necessárias)
{
  "name": "tourapp-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@react-oauth/google": "^0.12.1",
    "axios": "^1.6.0",
    "next": "14.0.0",
    "react": "^18",
    "react-dom": "^18",
    "react-hot-toast": "^2.4.1",
    "react-hook-form": "^7.47.0",
    "@headlessui/react": "^1.7.17",
    "@heroicons/react": "^2.0.18",
    "date-fns": "^2.30.0",
    "react-query": "^3.39.3"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10",
    "eslint": "^8",
    "eslint-config-next": "14.0.0",
    "postcss": "^8",
    "tailwindcss": "^3",
    "typescript": "^5"
  }
}

// pages/_app.js
import '../styles/globals.css';
import { GoogleOAuthProvider } from '@react-oauth/google';
import { Toaster } from 'react-hot-toast';
import { AuthProvider } from '../hooks/useAuth';
import { QueryClient, QueryClientProvider } from 'react-query';
import { useState } from 'react';

function MyApp({ Component, pageProps }) {
  const [queryClient] = useState(() => new QueryClient({
    defaultOptions: {
      queries: {
        retry: 1,
        refetchOnWindowFocus: false,
        staleTime: 5 * 60 * 1000, // 5 minutes
      },
    },
  }));

  return (
    <QueryClientProvider client={queryClient}>
      <GoogleOAuthProvider clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID}>
        <AuthProvider>
          <Component {...pageProps} />
          <Toaster
            position="top-right"
            toastOptions={{
              duration: 4000,
              style: {
                background: '#363636',
                color: '#fff',
              },
              success: {
                duration: 3000,
                theme: {
                  primary: 'green',
                  secondary: 'black',
                },
              },
            }}
          />
        </AuthProvider>
      </GoogleOAuthProvider>
    </QueryClientProvider>
  );
}

export default MyApp;

// pages/_document.js
import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html lang="pt-BR">
      <Head>
        <meta charSet="utf-8" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="description" content="TourApp - Sistema de Gerenciamento de Excursões" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

// components/Layout.jsx
import { useAuth } from '../hooks/useAuth';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';

const Layout = ({ children, title = 'TourApp' }) => {
  const { user, logout, hasRole } = useAuth();
  const router = useRouter();
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const handleLogout = async () => {
    await logout();
    router.push('/');
  };

  const navigation = [
    ...(hasRole('ROLE_ORGANIZADOR') ? [
      { name: 'Dashboard', href: '/organizador/dashboard' },
      { name: 'Excursões', href: '/organizador/excursoes' },
      { name: 'Inscrições', href: '/organizador/inscricoes' },
      { name: 'Notificações', href: '/organizador/notificacoes' },
    ] : []),
    ...(hasRole('ROLE_CLIENTE') ? [
      { name: 'Minhas Inscrições', href: '/cliente/inscricoes' },
      { name: 'Perfil', href: '/cliente/perfil' },
    ] : []),
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation */}
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex">
              <div className="flex-shrink-0 flex items-center">
                <Link href="/" className="text-xl font-bold text-gray-900">
                  TourApp
                </Link>
              </div>
              <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
                {navigation.map((item) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    className={`${
                      router.pathname === item.href
                        ? 'border-indigo-500 text-gray-900'
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}
                  >
                    {item.name}
                  </Link>
                ))}
              </div>
            </div>

            {/* User menu */}
            <div className="hidden sm:ml-6 sm:flex sm:items-center">
              {user ? (
                <div className="flex items-center space-x-4">
                  <span className="text-sm text-gray-700">
                    Olá, {user.name}
                  </span>
                  <button
                    onClick={handleLogout}
                    className="bg-white text-gray-400 hover:text-gray-600 px-3 py-2 rounded-md text-sm font-medium"
                  >
                    Sair
                  </button>
                </div>
              ) : (
                <Link
                  href="/login"
                  className="bg-indigo-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-indigo-700"
                >
                  Entrar
                </Link>
              )}
            </div>

            {/* Mobile menu button */}
            <div className="sm:hidden flex items-center">
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600"
              >
                <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              </button>
            </div>
          </div>
        </div>

        {/* Mobile menu */}
        {isMenuOpen && (
          <div className="sm:hidden">
            <div className="pt-2 pb-3 space-y-1">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className={`${
                    router.pathname === item.href
                      ? 'bg-indigo-50 border-indigo-500 text-indigo-700'
                      : 'border-transparent text-gray-500 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-700'
                  } block pl-3 pr-4 py-2 border-l-4 text-base font-medium`}
                >
                  {item.name}
                </Link>
              ))}
            </div>
          </div>
        )}
      </nav>

      {/* Page content */}
      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <h1 className="text-2xl font-semibold text-gray-900 mb-6">{title}</h1>
          {children}
        </div>
      </main>
    </div>
  );
};

export default Layout;

// components/GoogleLoginButton.tsx
import React from 'react';
import { GoogleLogin } from '@react-oauth/google';
import { useAuth } from '@/hooks/useAuth';
import { useRouter } from 'next/router';
import { toast } from 'react-hot-toast';

const GoogleLoginButton: React.FC = () => {
  const { login } = useAuth();
  const router = useRouter();

  const handleSuccess = async (credentialResponse: any) => {
    try {
      const userData = await login(credentialResponse.credential);
      
      toast.success('Login realizado com sucesso!');
      
      // Redirecionar baseado no tipo de usuário
      if (userData.roles.includes('ROLE_ORGANIZADOR')) {
        router.push('/organizador/dashboard');
      } else if (userData.roles.includes('ROLE_CLIENTE')) {
        router.push('/cliente/perfil');
      } else {
        router.push('/');
      }
    } catch (error: any) {
      toast.error(error.message || 'Erro no login');
    }
  };

  const handleError = () => {
    toast.error('Erro na autenticação com Google');
  };

  return (
    <GoogleLogin
      onSuccess={handleSuccess}
      onError={handleError}
      text="signin_with"
      shape="rectangular"
      size="large"
      theme="outline"
      width="100%"
    />
  );
};

export default GoogleLoginButton;

// utils/formatters.ts
export const formatCurrency = (value: number): string => {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(value);
};

export const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString('pt-BR');
};

export const formatDateTime = (dateString: string): string => {
  return new Date(dateString).toLocaleString('pt-BR');
};

export const formatPhone = (phone: string): string => {
  const cleaned = phone.replace(/\D/g, '');
  const match = cleaned.match(/^(\d{2})(\d{4,5})(\d{4})$/);
  if (match) {
    return `(${match[1]}) ${match[2]}-${match[3]}`;
  }
  return phone;
};

// utils/validation.ts
export const validateEmail = (email: string): boolean => {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
};

export const validateCNPJ = (cnpj: string): boolean => {
  const cleanCNPJ = cnpj.replace(/\D/g, '');
  return cleanCNPJ.length === 14;
};

export const validatePhone = (phone: string): boolean => {
  const cleanPhone = phone.replace(/\D/g, '');
  return cleanPhone.length >= 10 && cleanPhone.length <= 11;
};

export const validateCardNumber = (cardNumber: string): boolean => {
  const cleanNumber = cardNumber.replace(/\D/g, '');
  return cleanNumber.length >= 13 && cleanNumber.length <= 19;
};

export const validateCVV = (cvv: string): boolean => {
  const cleanCVV = cvv.replace(/\D/g, '');
  return cleanCVV.length >= 3 && cleanCVV.length <= 4;
};

// services/excursaoService.ts
import api from './api';
import { Excursao, ExcursaoRequest, ExcursaoFilters } from '@/types/excursao';
import { PaginatedResponse } from '@/types/api';

class ExcursaoService {
  // Métodos para organizadores
  async criarExcursao(excursaoData: ExcursaoRequest, imagens: File[]): Promise<Excursao> {
    try {
      const formData = new FormData();
      
      // Adicionar dados da excursão
      Object.keys(excursaoData).forEach(key => {
        const value = (excursaoData as any)[key];
        if (value !== null && value !== undefined) {
          formData.append(key, value.toString());
        }
      });
      
      // Adicionar imagens
      if (imagens && imagens.length > 0) {
        imagens.forEach(imagem => {
          formData.append('imagens', imagem);
        });
      }
      
      const response = await api.post('/organizador/excursoes', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      return response.data;
    } catch (error: any) {
      console.error('Erro ao criar excursão:', error);
      throw new Error(error.response?.data?.error?.message || 'Erro ao criar excursão');
    }
  }

  async listarExcursoes(filtros: ExcursaoFilters = {}): Promise<PaginatedResponse<Excursao>> {
    try {
      const params = new URLSearchParams();
      
      Object.keys(filtros).forEach(key => {
        const value = (filtros as any)[key];
        if (value !== null && value !== undefined && value !== '') {
          params.append(key, value.toString());
        }
      });
      
      const response = await api.get(`/organizador/excursoes?${params}`);
      return response.data;
    } catch (error) {
      console.error('Erro ao listar excursões:', error);
      throw error;
    }
  }

  async obterExcursao(id: string): Promise<Excursao> {
    try {
      const response = await api.get(`/organizador/excursoes/${id}`);
      return response.data;
    } catch (error) {
      console.error('Erro ao obter excursão:', error);
      throw error;
    }
  }

  async atualizarExcursao(id: string, excursaoData: ExcursaoRequest, imagens: File[]): Promise<Excursao> {
    try {
      const formData = new FormData();
      
      Object.keys(excursaoData).forEach(key => {
        const value = (excursaoData as any)[key];
        if (value !== null && value !== undefined) {
          formData.append(key, value.toString());
        }
      });
      
      if (imagens && imagens.length > 0) {
        imagens.forEach(imagem => {
          formData.append('imagens', imagem);
        });
      }
      
      const response = await api.put(`/organizador/excursoes/${id}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      return response.data;
    } catch (error: any) {
      console.error('Erro ao atualizar excursão:', error);
      throw error;
    }
  }

  async alterarStatus(id: string, status: string): Promise<Excursao> {
    try {
      const response = await api.patch(`/organizador/excursoes/${id}/status?status=${status}`);
      return response.data;
    } catch (error) {
      console.error('Erro ao alterar status:', error);
      throw error;
    }
  }

  async excluirExcursao(id: string): Promise<void> {
    try {
      await api.delete(`/organizador/excursoes/${id}`);
    } catch (error) {
      console.error('Erro ao excluir excursão:', error);
      throw error;
    }
  }

  // Métodos públicos
  async obterExcursaoPublica(id: string): Promise<Excursao> {
    try {
      const response = await api.get(`/public/excursoes/${id}`);
      return response.data;
    } catch (error) {
      console.error('Erro ao obter excursão pública:', error);
      throw error;
    }
  }

  async inscreverNaExcursao(excursaoId: string, observacoes?: string): Promise<any> {
    try {
      const response = await api.post(`/public/excursoes/${excursaoId}/inscricoes`, {
        observacoesCliente: observacoes
      });
      return response.data;
    } catch (error: any) {
      console.error('Erro ao se inscrever:', error);
      throw new Error(error.response?.data?.error?.message || 'Erro ao se inscrever na excursão');
    }
  }
}

export default new ExcursaoService();

// hooks/useDebounce.ts
import { useState, useEffect } from 'react';

export const useDebounce = <T>(value: T, delay: number): T => {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

// hooks/useLocalStorage.ts
import { useState, useEffect } from 'react';

export const useLocalStorage = <T>(key: string, initialValue: T): [T, (value: T | ((val: T) => T)) => void] => {
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue;
    }
    
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.warn(`Erro ao ler localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  const setValue = (value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.warn(`Erro ao salvar localStorage key "${key}":`, error);
    }
  };

  return [storedValue, setValue];
};

// pages/organizador/excursoes/criar.tsx
import React, { useState, ChangeEvent, FormEvent } from 'react';
import { useRouter } from 'next/router';
import { toast } from 'react-hot-toast';
import { useCriarExcursao } from '@/hooks/useExcursoes';
import { ExcursaoRequest } from '@/types/excursao';
import ProtectedRoute from '@/components/ProtectedRoute';
import Layout from '@/components/Layout';

const CriarExcursao: React.FC = () => {
  const router = useRouter();
  const criarExcursaoMutation = useCriarExcursao();
  
  const [formData, setFormData] = useState<ExcursaoRequest>({
    titulo: '',
    descricao: '',
    dataSaida: '',
    dataRetorno: '',
    preco: 0,
    vagasTotal: 0,
    localSaida: '',
    localDestino: '',
    observacoes: '',
    aceitaPix: true,
    aceitaCartao: true,
  });
  
  const [imagens, setImagens] = useState<File[]>([]);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    try {
      await criarExcursaoMutation.mutateAsync({
        excursaoData: formData,
        imagens
      });
      router.push('/organizador/excursoes');
    } catch (error) {
      // Error já tratado no hook
    }
  };

  const handleImageChange = (e: ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    setImagens(files);
  };

  const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    const checked = (e.target as HTMLInputElement).checked;
    
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' 
        ? checked 
        : type === 'number' 
          ? parseFloat(value) || 0
          : value
    }));
  };

  return (
    <ProtectedRoute requiredRole="ROLE_ORGANIZADOR">
      <Layout title="Criar Nova Excursão">
        <div className="container mx-auto px-4 py-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-medium mb-2">
                Título da Excursão
              </label>
              <input
                type="text"
                name="titulo"
                value={formData.titulo}
                onChange={handleInputChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">
                Descrição
              </label>
              <textarea
                name="descricao"
                value={formData.descricao}
                onChange={handleInputChange}
                required
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  Data de Saída
                </label>
                <input
                  type="datetime-local"
                  name="dataSaida"
                  value={formData.dataSaida}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  Data de Retorno
                </label>
                <input
                  type="datetime-local"
                  name="dataRetorno"
                  value={formData.dataRetorno}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  Preço (R$)
                </label>
                <input
                  type="number"
                  name="preco"
                  value={formData.preco}
                  onChange={handleInputChange}
                  required
                  min="0"
                  step="0.01"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  Total de Vagas
                </label>
                <input
                  type="number"
                  name="vagasTotal"
                  value={formData.vagasTotal}
                  onChange={handleInputChange}
                  required
                  min="1"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">
                Imagens da Excursão
              </label>
              <input
                type="file"
                multiple
                accept="image/*"
                onChange={handleImageChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div className="flex space-x-4">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  name="aceitaPix"
                  checked={formData.aceitaPix}
                  onChange={handleInputChange}
                  className="mr-2"
                />
                Aceita PIX
              </label>

              <label className="flex items-center">
                <input
                  type="checkbox"
                  name="aceitaCartao"
                  checked={formData.aceitaCartao}
                  onChange={handleInputChange}
                  className="mr-2"
                />
                Aceita Cartão
              </label>
            </div>

            <div className="flex justify-end space-x-4">
              <button
                type="button"
                onClick={() => router.back()}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50"
              >
                Cancelar
              </button>
              
              <button
                type="submit"
                disabled={criarExcursaoMutation.isLoading}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              >
                {criarExcursaoMutation.isLoading ? 'Criando...' : 'Criar Excursão'}
              </button>
            </div>
          </form>
        </div>
      </Layout>
    </ProtectedRoute>
  );
};

export default CriarExcursao;

// hooks/useExcursoes.js
import { useQuery, useMutation, useQueryClient } from 'react-query';
import excursaoService from '../services/excursaoService';
import { toast } from 'react-hot-toast';

export const useExcursoes = (filtros = {}) => {
  return useQuery(
    ['excursoes', filtros],
    () => excursaoService.listarExcursoes(filtros),
    {
      keepPreviousData: true,
      staleTime: 5 * 60 * 1000,
    }
  );
};

export const useExcursao = (id) => {
  return useQuery(
    ['excursao', id],
    () => excursaoService.obterExcursao(id),
    {
      enabled: !!id,
    }
  );
};

export const useExcursaoPublica = (id) => {
  return useQuery(
    ['excursao-publica', id],
    () => excursaoService.obterExcursaoPublica(id),
    {
      enabled: !!id,
    }
  );
};

export const useCriarExcursao = () => {
  const queryClient = useQueryClient();
  
  return useMutation(
    ({ excursaoData, imagens }) => excursaoService.criarExcursao(excursaoData, imagens),
    {
      onSuccess: () => {
        queryClient.invalidateQueries(['excursoes']);
        toast.success('Excursão criada com sucesso!');
      },
      onError: (error) => {
        toast.error(error.message || 'Erro ao criar excursão');
      },
    }
  );
};

export const useAtualizarExcursao = () => {
  const queryClient = useQueryClient();
  
  return useMutation(
    ({ id, excursaoData, imagens }) => excursaoService.atualizarExcursao(id, excursaoData, imagens),
    {
      onSuccess: (data) => {
        queryClient.invalidateQueries(['excursoes']);
        queryClient.invalidateQueries(['excursao', data.id]);
        toast.success('Excursão atualizada com sucesso!');
      },
      onError: (error) => {
        toast.error(error.message || 'Erro ao atualizar excursão');
      },
    }
  );
};

export const useAlterarStatusExcursao = () => {
  const queryClient = useQueryClient();
  
  return useMutation(
    ({ id, status }) => excursaoService.alterarStatus(id, status),
    {
      onSuccess: () => {
        queryClient.invalidateQueries(['excursoes']);
        queryClient.invalidateQueries(['excursao']);
        toast.success('Status alterado com sucesso!');
      },
      onError: (error) => {
        toast.error(error.message || 'Erro ao alterar status');
      },
    }
  );
};

// hooks/usePagamentos.js
import { useMutation } from 'react-query';
import pagamentoService from '../services/pagamentoService';
import { toast } from 'react-hot-toast';

export const usePagamentoPix = () => {
  return useMutation(
    (inscricaoId) => pagamentoService.criarPagamentoPix(inscricaoId),
    {
      onSuccess: (data) => {
        toast.success('Pagamento PIX criado! Use o QR Code para pagar.');
        return data;
      },
      onError: (error) => {
        toast.error(error.message || 'Erro ao processar pagamento PIX');
      },
    }
  );
};

export const usePagamentoCartao = () => {
  return useMutation(
    (dadosCartao) => pagamentoService.criarPagamentoCartao(dadosCartao),
    {
      onSuccess: (data) => {
        toast.success('Pagamento processado com sucesso!');
        return data;
      },
      onError: (error) => {
        toast.error(error.message || 'Erro ao processar pagamento');
      },
    }
  );
};

// components/ExcursaoCard.jsx
import Image from 'next/image';
import Link from 'next/link';
import { formatCurrency, formatDateTime } from '../utils/formatters';

const ExcursaoCard = ({ excursao, isPublic = false }) => {
  const baseUrl = isPublic ? '/excursoes' : '/organizador/excursoes';
  
  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
      {/* Imagem */}
      <div className="relative h-48 w-full">
        {excursao.imagens && excursao.imagens.length > 0 ? (
          <Image
            src={excursao.imagens[0]}
            alt={excursao.titulo}
            fill
            className="object-cover"
          />
        ) : (
          <div className="w-full h-full bg-gray-200 flex items-center justify-center">
            <span className="text-gray-400">Sem imagem</span>
          </div>
        )}
        
        {/* Status badge */}
        <div className="absolute top-2 right-2">
          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
            excursao.status === 'ATIVA' 
              ? 'bg-green-100 text-green-800'
              : excursao.status === 'SUSPENSA'
              ? 'bg-yellow-100 text-yellow-800'
              : 'bg-red-100 text-red-800'
          }`}>
            {excursao.status}
          </span>
        </div>
      </div>

      {/* Conteúdo */}
      <div className="p-4">
        <h3 className="text-lg font-semibold mb-2 line-clamp-2">
          {excursao.titulo}
        </h3>
        
        <p className="text-gray-600 text-sm mb-3 line-clamp-2">
          {excursao.descricao}
        </p>

        <div className="space-y-2 mb-4">
          <div className="flex items-center text-sm text-gray-500">
            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            {formatDateTime(excursao.dataSaida)}
          </div>
          
          <div className="flex items-center text-sm text-gray-500">
            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            {excursao.localSaida} → {excursao.localDestino}
          </div>

          <div className="flex items-center justify-between">
            <span className="text-lg font-bold text-green-600">
              {formatCurrency(excursao.preco)}
            </span>
            
            <span className="text-sm text-gray-500">
              {excursao.vagasDisponiveis}/{excursao.vagasTotal} vagas
            </span>
          </div>
        </div>

        {/* Métodos de pagamento */}
        <div className="flex items-center space-x-2 mb-4">
          {excursao.aceitaPix && (
            <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
              PIX
            </span>
          )}
          {excursao.aceitaCartao && (
            <span className="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded">
              Cartão
            </span>
          )}
        </div>

        {/* Ações */}
        <div className="flex space-x-2">
          <Link
            href={`${baseUrl}/${excursao.id}`}
            className="flex-1 bg-blue-600 text-white text-center py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
          >
            Ver Detalhes
          </Link>
          
          {!isPublic && (
            <Link
              href={`/organizador/excursoes/${excursao.id}/editar`}
              className="bg-gray-100 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-200 transition-colors"
            >
              Editar
            </Link>
          )}
        </div>
      </div>
    </div>
  );
};

export default ExcursaoCard;

// components/PagamentoModal.jsx
import { useState } from 'react';
import { usePagamentoPix, usePagamentoCartao } from '../hooks/usePagamentos';
import { formatCurrency } from '../utils/formatters';
import { validateCardNumber, validateCVV } from '../utils/validation';

const PagamentoModal = ({ isOpen, onClose, inscricao }) => {
  const [metodoPagamento, setMetodoPagamento] = useState('pix');
  const [dadosCartao, setDadosCartao] = useState({
    numeroCartao: '',
    nomeCartao: '',
    mesExpiracao: '',
    anoExpiracao: '',
    cvv: '',
    parcelas: 1,
  });

  const pagamentoPix = usePagamentoPix();
  const pagamentoCartao = usePagamentoCartao();

  const handlePagamentoPix = async () => {
    try {
      const resultado = await pagamentoPix.mutateAsync(inscricao.id);
      // Mostrar QR Code
      setQrCodeData(resultado);
    } catch (error) {
      console.error('Erro no pagamento PIX:', error);
    }
  };

  const handlePagamentoCartao = async () => {
    try {
      // Validações
      if (!validateCardNumber(dadosCartao.numeroCartao)) {
        toast.error('Número do cartão inválido');
        return;
      }
      
      if (!validateCVV(dadosCartao.cvv)) {
        toast.error('CVV inválido');
        return;
      }

      const dadosCompletos = {
        ...dadosCartao,
        inscricaoId: inscricao.id,
      };

      const resultado = await pagamentoCartao.mutateAsync(dadosCompletos);
      // Redirecionar para link de pagamento se necessário
      if (resultado.linkPagamento) {
        window.open(resultado.linkPagamento, '_blank');
      }
      onClose();
    } catch (error) {
      console.error('Erro no pagamento cartão:', error);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Pagamento</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <div className="mb-4">
          <h3 className="font-medium">{inscricao.tituloExcursao}</h3>
          <p className="text-2xl font-bold text-green-600">
            {formatCurrency(inscricao.valorPago)}
          </p>
        </div>

        {/* Seleção do método */}
        <div className="mb-6">
          <div className="flex space-x-4">
            <label className="flex items-center">
              <input
                type="radio"
                name="metodoPagamento"
                value="pix"
                checked={metodoPagamento === 'pix'}
                onChange={(e) => setMetodoPagamento(e.target.value)}
                className="mr-2"
              />
              PIX
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                name="metodoPagamento"
                value="cartao"
                checked={metodoPagamento === 'cartao'}
                onChange={(e) => setMetodoPagamento(e.target.value)}
                className="mr-2"
              />
              Cartão de Crédito
            </label>
          </div>
        </div>

        {/* Formulário PIX */}
        {metodoPagamento === 'pix' && (
          <div className="space-y-4">
            <p className="text-sm text-gray-600">
              Clique no botão abaixo para gerar o código PIX e realizar o pagamento.
            </p>
            <button
              onClick={handlePagamentoPix}
              disabled={pagamentoPix.isLoading}
              className="w-full bg-blue-600 text-white py-3 rounded-md hover:bg-blue-700 disabled:opacity-50"
            >
              {pagamentoPix.isLoading ? 'Gerando PIX...' : 'Gerar PIX'}
            </button>
          </div>
        )}

        {/* Formulário Cartão */}
        {metodoPagamento === 'cartao' && (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">
                Número do Cartão
              </label>
              <input
                type="text"
                value={dadosCartao.numeroCartao}
                onChange={(e) => setDadosCartao(prev => ({
                  ...prev,
                  numeroCartao: e.target.value.replace(/\D/g, '')
                }))}
                placeholder="1234 5678 9012 3456"
                maxLength="19"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">
                Nome no Cartão
              </label>
              <input
                type="text"
                value={dadosCartao.nomeCartao}
                onChange={(e) => setDadosCartao(prev => ({
                  ...prev,
                  nomeCartao: e.target.value.toUpperCase()
                }))}
                placeholder="NOME COMPLETO"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div className="grid grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">
                  Mês
                </label>
                <input
                  type="text"
                  value={dadosCartao.mesExpiracao}
                  onChange={(e) => setDadosCartao(prev => ({
                    ...prev,
                    mesExpiracao: e.target.value.replace(/\D/g, '').slice(0, 2)
                  }))}
                  placeholder="12"
                  maxLength="2"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  Ano
                </label>
                <input
                  type="text"
                  value={dadosCartao.anoExpiracao}
                  onChange={(e) => setDadosCartao(prev => ({
                    ...prev,
                    anoExpiracao: e.target.value.replace(/\D/g, '').slice(0, 4)
                  }))}
                  placeholder="2028"
                  maxLength="4"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  CVV
                </label>
                <input
                  type="text"
                  value={dadosCartao.cvv}
                  onChange={(e) => setDadosCartao(prev => ({
                    ...prev,
                    cvv: e.target.value.replace(/\D/g, '').slice(0, 4)
                  }))}
                  placeholder="123"
                  maxLength="4"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>

            <button
              onClick={handlePagamentoCartao}
              disabled={pagamentoCartao.isLoading}
              className="w-full bg-blue-600 text-white py-3 rounded-md hover:bg-blue-700 disabled:opacity-50"
            >
              {pagamentoCartao.isLoading ? 'Processando...' : 'Pagar com Cartão'}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default PagamentoModal;

// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        },
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/line-clamp'),
  ],
}

// styles/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    font-family: system-ui, sans-serif;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded-md font-medium transition-colors;
  }
  
  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700;
  }
  
  .btn-secondary {
    @apply bg-gray-200 text-gray-900 hover:bg-gray-300;
  }
  
  .card {
    @apply bg-white rounded-lg shadow-md p-6;
  }
  
  .input {
    @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500;
  }
}

// Instruções de Deploy - Vercel
// vercel.json
{
  "env": {
    "NEXT_PUBLIC_API_URL": "@tourapp-api-url",
    "NEXT_PUBLIC_GOOGLE_CLIENT_ID": "@tourapp-google-client-id"
  },
  "functions": {
    "pages/api/**/*.js": {
      "maxDuration": 30
    }
  }
}

// Instruções de Deploy - Railway
// railway.toml
[build]
buildCommand = "npm run build"
startCommand = "npm start"

[variables]
NEXT_PUBLIC_API_URL = "https://seu-backend-railway.up.railway.app"
NEXT_PUBLIC_GOOGLE_CLIENT_ID = "seu_google_client_id"

// README.md para configuração
# TourApp Frontend

## Configuração Inicial

1. **Clonar o repositório**
```bash
git clone https://github.com/seu-usuario/tourapp-frontend.git
cd tourapp-frontend
```

2. **Instalar dependências**
```bash
npm install
```

3. **Configurar variáveis de ambiente**
```bash
cp .env.example .env.local
# Editar .env.local com suas configurações
```

4. **Configurar Google OAuth**
- Acessar https://console.developers.google.com
- Criar novo projeto ou usar existente
- Habilitar Google+ API
- Criar credenciais OAuth 2.0
- Adicionar domínios autorizados
- Copiar Client ID para .env.local

5. **Executar em desenvolvimento**
```bash
npm run dev
```

## Estrutura de Pastas

```
/components     # Componentes reutilizáveis
/hooks         # Custom hooks
/pages         # Páginas Next.js
/services      # Serviços de API
/styles        # Arquivos CSS
/utils         # Funções utilitárias
```

## Endpoints do Backend

Base URL: Configure em NEXT_PUBLIC_API_URL

### Autenticação
- POST /api/v1/auth/google - Login Google
- GET /api/v1/auth/me - Dados do usuário
- POST /api/v1/auth/refresh - Renovar token
- POST /api/v1/auth/logout - Logout

### Organizadores
- GET /organizador/perfil - Perfil
- GET /organizador/dashboard - Dashboard
- GET,POST,PUT,DELETE /organizador/excursoes - CRUD Excursões

### Clientes
- GET /cliente/perfil - Perfil
- GET /cliente/inscricoes - Inscrições

### Público
- GET /public/excursoes/{id} - Ver excursão
- POST /public/excursoes/{id}/inscricoes - Inscrever

### Pagamentos
- POST /pagamentos/pix - Pagamento PIX
- POST /pagamentos/cartao - Pagamento cartão

## Deploy

### Vercel
```bash
npm install -g vercel
vercel --prod
```

### Railway
```bash
# Conectar repositório GitHub ao Railway
# Configurar variáveis de ambiente no dashboard
```

## Troubleshooting

1. **Erro de CORS**: Verificar configuração do backend
2. **Token inválido**: Verificar configuração JWT
3. **Upload falha**: Verificar configuração Cloudinary
4. **Google OAuth**: Verificar domínios autorizados