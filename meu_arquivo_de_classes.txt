//pages/api/auth/[...nextauth].ts
import NextAuth from 'next-auth';
import { authOptions } from '../../../lib/auth';

export default NextAuth(authOptions);

//pages/_app.tsx
import '../styles/globals.css';
import type { AppProps } from 'next/app';
import { SessionProvider } from 'next-auth/react';
import { QueryClient, QueryClientProvider } from 'react-query';
import { useState } from 'react';

export default function App({
  Component,
  pageProps: { session, ...pageProps },
}: AppProps) {
  const [queryClient] = useState(() => new QueryClient({
    defaultOptions: {
      queries: {
        retry: 1,
        staleTime: 5 * 60 * 1000, // 5 minutes
      },
    },
  }));

  return (
    <SessionProvider session={session}>
      <QueryClientProvider client={queryClient}>
        <Component {...pageProps} />
      </QueryClientProvider>
    </SessionProvider>
  );
}

//pages/_document.tsx
import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html lang="pt-BR">
      <Head>
        <meta charSet="utf-8" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link
          href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap"
          rel="stylesheet"
        />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

//types/index.ts
export interface User {
  id: string;
  nome: string;
  email: string;
  telefone?: string;
  avatar?: string;
  tipoUsuario: 'CLIENTE' | 'ORGANIZADOR';
  ativo: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Cliente extends User {
  pushToken?: string;
}

export interface Organizador extends User {
  nomeEmpresa: string;
  cnpj?: string;
  descricao?: string;
}

export interface Excursao {
  id: string;
  titulo: string;
  descricao: string;
  destino: string;
  dataIda: string;
  dataVolta?: string;
  horarioSaida: string;
  localSaida: string;
  preco: number;
  precoMenor?: number;
  vagasTotal: number;
  vagasDisponiveis: number;
  status: 'ATIVA' | 'INATIVA' | 'CANCELADA' | 'FINALIZADA';
  imagens: string[];
  organizador: Organizador;
  createdAt: string;
  updatedAt: string;
}

export interface Inscricao {
  id: string;
  nomeCompleto: string;
  telefone: string;
  documento: string;
  quantidadePessoas: number;
  valorTotal: number;
  status: 'PENDENTE' | 'CONFIRMADA' | 'CANCELADA';
  observacoes?: string;
  excursao: Excursao;
  cliente: Cliente;
  pagamentos: Pagamento[];
  createdAt: string;
  updatedAt: string;
}

export interface Pagamento {
  id: string;
  valor: number;
  metodoPagamento: 'PIX' | 'CARTAO_CREDITO';
  status: 'PENDENTE' | 'PROCESSANDO' | 'APROVADO' | 'REJEITADO' | 'CANCELADO';
  pixQrCode?: string;
  pixCopiaeCola?: string;
  mercadoPagoId?: string;
  paymentLink?: string;
  createdAt: string;
  updatedAt: string;
}

export interface DashboardData {
  totalExcursoes: number;
  excursoesAtivas: number;
  totalInscricoes: number;
  inscricoesConfirmadas: number;
  receitaTotal: number;
  receitaMesAtual: number;
  proximasExcursoes: Excursao[];
  inscricoesRecentes: Inscricao[];
}

//styles/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    font-family: 'Inter', system-ui, sans-serif;
  }
  
  h1, h2, h3, h4, h5, h6 {
    font-family: 'Poppins', system-ui, sans-serif;
  }
}

@layer components {
  .btn {
    @apply inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-200;
  }
  
  .btn-primary {
    @apply btn bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500;
  }
  
  .btn-secondary {
    @apply btn bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500;
  }
  
  .btn-outline {
    @apply btn border-gray-300 text-gray-700 bg-white hover:bg-gray-50 focus:ring-primary-500;
  }
  
  .btn-danger {
    @apply btn bg-red-600 text-white hover:bg-red-700 focus:ring-red-500;
  }
  
  .form-input {
    @apply block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500;
  }
  
  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
  
  .card {
    @apply bg-white rounded-lg shadow-sm border border-gray-200;
  }
  
  .page-title {
    @apply text-2xl font-bold text-gray-900 mb-6;
  }
  
  .section-title {
    @apply text-lg font-semibold text-gray-900 mb-4;
  }
}

@layer utilities {
  .animate-fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }
  
  .animate-slide-up {
    animation: slideUp 0.3s ease-out;
  }
  
  .text-gradient {
    @apply bg-gradient-to-r from-primary-600 to-secondary-600 bg-clip-text text-transparent;
  }
}

//components/Layout/Header.tsx
import React, { useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useSession, signOut } from 'next-auth/react';
import { 
  Menu, 
  X, 
  User, 
  LogOut, 
  Settings, 
  MapPin,
  Bell,
  Search
} from 'lucide-react';

const Header: React.FC = () => {
  const { data: session } = useSession();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false);

  const handleSignOut = () => {
    signOut({ callbackUrl: '/' });
  };

  const isOrganizador = session?.userType === 'ORGANIZADOR';
  const isCliente = session?.userType === 'CLIENTE';

  return (
    <header className="bg-white shadow-sm border-b border-gray-200 fixed w-full top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <div className="flex items-center">
            <Link href="/" className="flex items-center space-x-2">
              <div className="bg-primary-600 rounded-lg p-2">
                <MapPin className="h-6 w-6 text-white" />
              </div>
              <span className="text-xl font-bold text-gray-900">TourApp</span>
            </Link>
          </div>

          {/* Navigation - Desktop */}
          <nav className="hidden md:flex items-center space-x-8">
            <Link href="/excursoes" className="text-gray-700 hover:text-primary-600 font-medium transition-colors">
              Excursões
            </Link>
            
            {!session && (
              <>
                <Link href="/sobre" className="text-gray-700 hover:text-primary-600 font-medium transition-colors">
                  Sobre
                </Link>
                <Link href="/contato" className="text-gray-700 hover:text-primary-600 font-medium transition-colors">
                  Contato
                </Link>
              </>
            )}

            {session && (
              <>
                {isOrganizador && (
                  <Link href="/organizador/dashboard" className="text-gray-700 hover:text-primary-600 font-medium transition-colors">
                    Dashboard
                  </Link>
                )}
                
                {isCliente && (
                  <Link href="/cliente/inscricoes" className="text-gray-700 hover:text-primary-600 font-medium transition-colors">
                    Minhas Inscrições
                  </Link>
                )}
              </>
            )}
          </nav>

          {/* Right side - Desktop */}
          <div className="hidden md:flex items-center space-x-4">
            {session ? (
              <>
                {/* Notifications */}
                <button className="relative p-2 text-gray-400 hover:text-gray-500">
                  <Bell className="h-5 w-5" />
                  <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-400"></span>
                </button>

                {/* Profile Menu */}
                <div className="relative">
                  <button
                    onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}
                    className="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100"
                  >
                    {session.user?.image ? (
                      <Image src={session.user.image} alt="Profile" width={32} height={32} className="rounded-full" />
                    ) : (
                      <div className="w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center">
                        <User className="h-4 w-4 text-white" />
                      </div>
                    )}
                    <span className="text-sm font-medium text-gray-700">
                      {session.user?.name?.split(' ')[0]}
                    </span>
                  </button>

                  {isProfileMenuOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border py-1 z-50">
                      <div className="px-4 py-2 border-b">
                        <p className="text-sm font-medium text-gray-900">{session.user?.name}</p>
                        <p className="text-xs text-gray-500">{session.user?.email}</p>
                        <p className="text-xs text-primary-600 font-medium">
                          {isOrganizador ? 'Organizador' : 'Cliente'}
                        </p>
                      </div>
                      
                      <Link href={`/${isOrganizador ? 'organizador' : 'cliente'}/perfil`} 
                            className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                        <User className="h-4 w-4 mr-2" />
                        Meu Perfil
                      </Link>
                      
                      <Link href={`/${isOrganizador ? 'organizador' : 'cliente'}/configuracoes`}
                            className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                        <Settings className="h-4 w-4 mr-2" />
                        Configurações
                      </Link>
                      
                      <button onClick={handleSignOut}
                              className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50">
                        <LogOut className="h-4 w-4 mr-2" />
                        Sair
                      </button>
                    </div>
                  )}
                </div>
              </>
            ) : (
              <div className="flex items-center space-x-4">
                <Link href="/auth/login" className="text-gray-700 hover:text-primary-600 font-medium">
                  Entrar
                </Link>
                <Link href="/auth/register" className="btn-primary">
                  Cadastrar
                </Link>
              </div>
            )}
          </div>

          {/* Mobile menu button */}
          <div className="md:hidden">
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="p-2 rounded-lg text-gray-400 hover:text-gray-500 hover:bg-gray-100"
            >
              {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </button>
          </div>
        </div>

        {/* Mobile menu */}
        {isMenuOpen && (
          <div className="md:hidden border-t border-gray-200 py-4">
            <div className="space-y-2">
              <Link href="/excursoes" className="block px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">
                Excursões
              </Link>
              
              {session ? (
                <>
                  {isOrganizador && (
                    <Link href="/organizador/dashboard" className="block px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">
                      Dashboard
                    </Link>
                  )}
                  
                  {isCliente && (
                    <Link href="/cliente/inscricoes" className="block px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">
                      Minhas Inscrições
                    </Link>
                  )}
                  
                  <Link href={`/${isOrganizador ? 'organizador' : 'cliente'}/perfil`} 
                        className="block px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">
                    Meu Perfil
                  </Link>
                  
                  <button onClick={handleSignOut} className="block w-full text-left px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg">
                    Sair
                  </button>
                </>
              ) : (
                <>
                  <Link href="/sobre" className="block px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">
                    Sobre
                  </Link>
                  <Link href="/contato" className="block px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">
                    Contato
                  </Link>
                  <Link href="/auth/login" className="block px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">
                    Entrar
                  </Link>
                  <Link href="/auth/register" className="block px-3 py-2 bg-primary-600 text-white rounded-lg">
                    Cadastrar
                  </Link>
                </>
              )}
            </div>
          </div>
        )}
      </div>
    </header>
  );
};

export default Header;

//components/Layout/Footer.tsx
import React from 'react';
import Link from 'next/link';
import { MapPin, Mail, Phone, Facebook, Instagram, Twitter } from 'lucide-react';

const Footer: React.FC = () => {
  return (
    <footer className="bg-gray-900 text-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Logo e Descrição */}
          <div className="col-span-1 md:col-span-2">
            <div className="flex items-center space-x-2 mb-4">
              <div className="bg-primary-600 rounded-lg p-2">
                <MapPin className="h-6 w-6 text-white" />
              </div>
              <span className="text-xl font-bold">TourApp</span>
            </div>
            <p className="text-gray-300 mb-6">
              A plataforma completa para organizar e descobrir excursões incríveis. 
              Conectamos organizadores e viajantes em todo o Brasil.
            </p>
            <div className="flex space-x-4">
              <a href="#" className="text-gray-400 hover:text-white transition-colors">
                <Facebook className="h-5 w-5" />
              </a>
              <a href="#" className="text-gray-400 hover:text-white transition-colors">
                <Instagram className="h-5 w-5" />
              </a>
              <a href="#" className="text-gray-400 hover:text-white transition-colors">
                <Twitter className="h-5 w-5" />
              </a>
            </div>
          </div>

          {/* Links Rápidos */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Links Rápidos</h3>
            <ul className="space-y-2">
              <li><Link href="/excursoes" className="text-gray-300 hover:text-white transition-colors">Excursões</Link></li>
              <li><Link href="/sobre" className="text-gray-300 hover:text-white transition-colors">Sobre Nós</Link></li>
              <li><Link href="/contato" className="text-gray-300 hover:text-white transition-colors">Contato</Link></li>
              <li><Link href="/termos" className="text-gray-300 hover:text-white transition-colors">Termos de Uso</Link></li>
              <li><Link href="/privacidade" className="text-gray-300 hover:text-white transition-colors">Política de Privacidade</Link></li>
            </ul>
          </div>

          {/* Contato */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Contato</h3>
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <Mail className="h-4 w-4 text-gray-400" />
                <span className="text-gray-300">contato@tourapp.com.br</span>
              </div>
              <div className="flex items-center space-x-2">
                <Phone className="h-4 w-4 text-gray-400" />
                <span className="text-gray-300">(11) 99999-9999</span>
              </div>
            </div>
          </div>
        </div>

        <div className="border-t border-gray-800 mt-8 pt-8 text-center">
          <p className="text-gray-400">
            © 2025 TourApp. Todos os direitos reservados.
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

//components/Layout/Sidebar.tsx
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { 
  LayoutDashboard, 
  Map, 
  Users, 
  CreditCard, 
  Bell, 
  Settings, 
  User,
  Calendar,
  BarChart3
} from 'lucide-react';

interface SidebarProps {
  userType?: string;
}

const Sidebar: React.FC<SidebarProps> = ({ userType }) => {
  const router = useRouter();

  const organizadorMenuItems = [
    { href: '/organizador/dashboard', icon: LayoutDashboard, label: 'Dashboard' },
    { href: '/organizador/excursoes', icon: Map, label: 'Excursões' },
    { href: '/organizador/inscricoes', icon: Users, label: 'Inscrições' },
    { href: '/organizador/pagamentos', icon: CreditCard, label: 'Pagamentos' },
    { href: '/organizador/notificacoes', icon: Bell, label: 'Notificações' },
    { href: '/organizador/relatorios', icon: BarChart3, label: 'Relatórios' },
    { href: '/organizador/perfil', icon: User, label: 'Perfil' },
    { href: '/organizador/configuracoes', icon: Settings, label: 'Configurações' },
  ];

  const clienteMenuItems = [
    { href: '/cliente/dashboard', icon: LayoutDashboard, label: 'Dashboard' },
    { href: '/cliente/inscricoes', icon: Calendar, label: 'Minhas Inscrições' },
    { href: '/cliente/perfil', icon: User, label: 'Meu Perfil' },
    { href: '/cliente/configuracoes', icon: Settings, label: 'Configurações' },
  ];

  const menuItems = userType === 'ORGANIZADOR' ? organizadorMenuItems : clienteMenuItems;

  return (
    <aside className="fixed left-0 top-16 h-[calc(100vh-4rem)] w-64 bg-white border-r border-gray-200 overflow-y-auto">
      <nav className="p-4">
        <ul className="space-y-2">
          {menuItems.map((item) => {
            const isActive = router.pathname === item.href;
            const Icon = item.icon;
            
            return (
              <li key={item.href}>
                <Link
                  href={item.href}
                  className={`flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                    isActive
                      ? 'bg-primary-600 text-white'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <Icon className="h-5 w-5" />
                  <span>{item.label}</span>
                </Link>
              </li>
            );
          })}
        </ul>
      </nav>
    </aside>
  );
};

export default Sidebar;

//pages/index.tsx
import React from 'react';
import Layout from '../components/Layout';
import Link from 'next/link';
import { MapPin, Users, Shield, Clock, Star, ArrowRight } from 'lucide-react';

const HomePage: React.FC = () => {
  const features = [
    {
      icon: MapPin,
      title: 'Destinos Incríveis',
      description: 'Descubra os melhores destinos do Brasil com organizadores experientes.',
    },
    {
      icon: Shield,
      title: 'Pagamento Seguro',
      description: 'Compre com segurança usando PIX ou cartão de crédito.',
    },
    {
      icon: Users,
      title: 'Comunidade Ativa',
      description: 'Conecte-se com outros viajantes e compartilhe experiências.',
    },
    {
      icon: Clock,
      title: 'Suporte 24/7',
      description: 'Nossa equipe está sempre pronta para ajudar você.',
    },
  ];

  const testimonials = [
    {
      name: 'Maria Silva',
      location: 'São Paulo, SP',
      text: 'Melhor plataforma para encontrar excursões! Já fiz 3 viagens e todas foram perfeitas.',
      rating: 5,
    },
    {
      name: 'João Santos',
      location: 'Rio de Janeiro, RJ',
      text: 'Como organizador, o TourApp revolucionou meu negócio. Vendas aumentaram 300%!',
      rating: 5,
    },
    {
      name: 'Ana Costa',
      location: 'Belo Horizonte, MG',
      text: 'Interface super fácil de usar e pagamento rápido. Recomendo para todos!',
      rating: 5,
    },
  ];

  return (
    <Layout>
      {/* Hero Section */}
      <section className="relative bg-gradient-to-br from-primary-600 to-secondary-600 text-white">
        <div className="absolute inset-0 bg-black opacity-20"></div>
        <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24">
          <div className="text-center">
            <h1 className="text-4xl md:text-6xl font-bold mb-6">
              Descubra o Brasil com{' '}
              <span className="text-gradient">TourApp</span>
            </h1>
            <p className="text-xl md:text-2xl mb-8 max-w-3xl mx-auto">
              A plataforma que conecta viajantes aos melhores organizadores de excursões do país.
              Viaje com segurança, comodidade e preços justos.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link href="/excursoes" className="btn-primary text-lg px-8 py-3">
                Ver Excursões
                <ArrowRight className="ml-2 h-5 w-5" />
              </Link>
              <Link href="/auth/register" className="btn-outline text-lg px-8 py-3 bg-white text-primary-600 hover:bg-gray-100">
                Cadastre-se Grátis
              </Link>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              Por que escolher o TourApp?
            </h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Oferecemos a melhor experiência tanto para viajantes quanto para organizadores de excursões.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {features.map((feature, index) => {
              const Icon = feature.icon;
              return (
                <div key={index} className="text-center">
                  <div className="inline-flex items-center justify-center w-16 h-16 bg-primary-600 rounded-lg mb-4">
                    <Icon className="h-8 w-8 text-white" />
                  </div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">
                    {feature.title}
                  </h3>
                  <p className="text-gray-600">
                    {feature.description}
                  </p>
                </div>
              );
            })}
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-20 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
            <div>
              <div className="text-4xl font-bold text-primary-600 mb-2">500+</div>
              <div className="text-gray-600">Excursões Realizadas</div>
            </div>
            <div>
              <div className="text-4xl font-bold text-primary-600 mb-2">10k+</div>
              <div className="text-gray-600">Viajantes Satisfeitos</div>
            </div>
            <div>
              <div className="text-4xl font-bold text-primary-600 mb-2">100+</div>
              <div className="text-gray-600">Organizadores Parceiros</div>
            </div>
          </div>
        </div>
      </section>

      {/* Testimonials Section */}
      <section className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              O que nossos usuários dizem
            </h2>
            <p className="text-xl text-gray-600">
              Depoimentos reais de quem já usou o TourApp
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {testimonials.map((testimonial, index) => (
              <div key={index} className="bg-gray-50 rounded-lg p-6">
                <div className="flex items-center mb-4">
                  {[...Array(testimonial.rating)].map((_, i) => (
                    <Star key={i} className="h-5 w-5 text-yellow-400 fill-current" />
                  ))}
                </div>
                <p className="text-gray-700 mb-4 italic">
                  "{testimonial.text}"
                </p>
                <div>
                  <div className="font-semibold text-gray-900">{testimonial.name}</div>
                  <div className="text-sm text-gray-600">{testimonial.location}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-primary-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl font-bold mb-4">
            Pronto para sua próxima aventura?
          </h2>
          <p className="text-xl mb-8 max-w-2xl mx-auto">
            Junte-se a milhares de viajantes que já descobriram o Brasil com o TourApp.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link href="/excursoes" className="btn bg-white text-primary-600 hover:bg-gray-100 text-lg px-8 py-3">
              Explorar Excursões
            </Link>
            <Link href="/auth/register?type=organizador" className="btn-outline border-white text-white hover:bg-white hover:text-primary-600 text-lg px-8 py-3">
              Tornar-se Organizador
            </Link>
          </div>
        </div>
      </section>
    </Layout>
  );
};

export default HomePage;

//pages/excursoes/index.tsx
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Layout from '../../components/Layout';
import ExcursaoCard from '../../components/Excursoes/ExcursaoCard';
import ExcursaoFilters from '../../components/Excursoes/ExcursaoFilters';
import { Search, Filter, MapPin, Calendar } from 'lucide-react';
import { excursoesService } from '../../lib/api';
import { Excursao } from '../../types';
import toast from 'react-hot-toast';

const ExcursoesPage: React.FC = () => {
  const router = useRouter();
  const [excursoes, setExcursoes] = useState<Excursao[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState({
    destino: '',
    precoMin: '',
    precoMax: '',
    dataInicio: '',
    dataFim: '',
    status: 'ATIVA',
  });

  useEffect(() => {
    loadExcursoes();
  }, [filters]);

  const loadExcursoes = async () => {
    try {
      setLoading(true);
      const response = await excursoesService.listarExcursoes({
        ...filters,
        search: searchTerm,
      });
      setExcursoes(response.data.content || []);
    } catch (error) {
      toast.error('Erro ao carregar excursões');
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    loadExcursoes();
  };

  const filteredExcursoes = excursoes.filter(excursao =>
    excursao.titulo.toLowerCase().includes(searchTerm.toLowerCase()) ||
    excursao.destino.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <Layout 
      title="Excursões Disponíveis"
      description="Encontre a excursão perfeita para sua próxima aventura"
    >
      {/* Search Section */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
        <form onSubmit={handleSearch} className="flex flex-col md:flex-row gap-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="text"
              placeholder="Buscar por destino ou título..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="form-input pl-10 w-full"
            />
          </div>
          <button
            type="button"
            onClick={() => setShowFilters(!showFilters)}
            className="btn-outline flex items-center"
          >
            <Filter className="h-4 w-4 mr-2" />
            Filtros
          </button>
          <button type="submit" className="btn-primary">
            Buscar
          </button>
        </form>

        {/* Filters */}
        {showFilters && (
          <div className="mt-6 pt-6 border-t border-gray-200">
            <ExcursaoFilters
              filters={filters}
              onFiltersChange={setFilters}
            />
          </div>
        )}
      </div>

      {/* Results */}
      <div className="space-y-6">
        {loading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, index) => (
              <div key={index} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 animate-pulse">
                <div className="h-48 bg-gray-300 rounded-lg mb-4"></div>
                <div className="h-6 bg-gray-300 rounded mb-2"></div>
                <div className="h-4 bg-gray-300 rounded mb-4"></div>
                <div className="h-4 bg-gray-300 rounded w-1/2"></div>
              </div>
            ))}
          </div>
        ) : filteredExcursoes.length > 0 ? (
          <>
            <div className="flex items-center justify-between">
              <p className="text-gray-600">
                {filteredExcursoes.length} excursões encontradas
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredExcursoes.map((excursao) => (
                <ExcursaoCard
                  key={excursao.id}
                  excursao={excursao}
                  onClick={() => router.push(`/excursoes/${excursao.id}`)}
                />
              ))}
            </div>
          </>
        ) : (
          <div className="text-center py-12">
            <MapPin className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              Nenhuma excursão encontrada
            </h3>
            <p className="text-gray-600 mb-4">
              Tente ajustar os filtros ou buscar por outros termos.
            </p>
            <button
              onClick={() => {
                setSearchTerm('');
                setFilters({
                  destino: '',
                  precoMin: '',
                  precoMax: '',
                  dataInicio: '',
                  dataFim: '',
                  status: 'ATIVA',
                });
              }}
              className="btn-primary"
            >
              Limpar Filtros
            </button>
          </div>
        )}
      </div>
    </Layout>
  );
};

export default ExcursoesPage;

//pages/excursoes/[id].tsx
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useSession } from 'next-auth/react';
import Layout from '../../components/Layout';
import ImageGallery from '../../components/Excursoes/ImageGallery';
import InscricaoForm from '../../components/Excursoes/InscricaoForm';
import { 
  MapPin, 
  Calendar, 
  Clock, 
  Users, 
  Star,
  Shield,
  Phone,
  Mail,
  Share2
} from 'lucide-react';
import { excursoesService, formatCurrency, formatDate, formatDateTime } from '../../lib/api';
import { Excursao } from '../../types';
import toast from 'react-hot-toast';

const ExcursaoDetailsPage: React.FC = () => {
  const router = useRouter();
  const { data: session } = useSession();
  const { id } = router.query;
  
  const [excursao, setExcursao] = useState<Excursao | null>(null);
  const [loading, setLoading] = useState(true);
  const [showInscricaoForm, setShowInscricaoForm] = useState(false);

  useEffect(() => {
    if (id) {
      loadExcursao();
    }
  }, [id]);

  const loadExcursao = async () => {
    try {
      setLoading(true);
      const response = await excursoesService.getPublicExcursao(id as string);
      setExcursao(response.data);
    } catch (error) {
      toast.error('Excursão não encontrada');
      router.push('/excursoes');
    } finally {
      setLoading(false);
    }
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: excursao?.titulo,
          text: excursao?.descricao,
          url: window.location.href,
        });
      } catch (error) {
        // User cancelled or error occurred
      }
    } else {
      // Fallback - copy to clipboard
      navigator.clipboard.writeText(window.location.href);
      toast.success('Link copiado para a área de transferência!');
    }
  };

  if (loading) {
    return (
      <Layout>
        <div className="animate-pulse">
          <div className="h-64 bg-gray-300 rounded-lg mb-6"></div>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2 space-y-4">
              <div className="h-8 bg-gray-300 rounded"></div>
              <div className="h-4 bg-gray-300 rounded"></div>
              <div className="h-4 bg-gray-300 rounded w-3/4"></div>
            </div>
            <div className="h-96 bg-gray-300 rounded-lg"></div>
          </div>
        </div>
      </Layout>
    );
  }

  if (!excursao) {
    return (
      <Layout>
        <div className="text-center py-12">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">
            Excursão não encontrada
          </h1>
          <button onClick={() => router.push('/excursoes')} className="btn-primary">
            Voltar para Excursões
          </button>
        </div>
      </Layout>
    );
  }

  const isDisponivel = excursao.status === 'ATIVA' && excursao.vagasDisponiveis > 0;

  return (
    <Layout>
      <div className="space-y-6">
        {/* Image Gallery */}
        <ImageGallery images={excursao.imagens} title={excursao.titulo} />

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Header */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-start justify-between mb-4">
                <div>
                  <h1 className="text-3xl font-bold text-gray-900 mb-2">
                    {excursao.titulo}
                  </h1>
                  <div className="flex items-center text-gray-600 mb-2">
                    <MapPin className="h-5 w-5 mr-2" />
                    <span>{excursao.destino}</span>
                  </div>
                  <div className="flex items-center text-gray-600">
                    <Users className="h-5 w-5 mr-2" />
                    <span>{excursao.vagasDisponiveis} vagas disponíveis de {excursao.vagasTotal}</span>
                  </div>
                </div>
                <button
                  onClick={handleShare}
                  className="btn-outline flex items-center"
                >
                  <Share2 className="h-4 w-4 mr-2" />
                  Compartilhar
                </button>
              </div>

              {/* Status Badge */}
              <div className="mb-4">
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                  excursao.status === 'ATIVA'
                    ? 'bg-green-100 text-green-800'
                    : excursao.status === 'INATIVA'
                    ? 'bg-gray-100 text-gray-800'
                    : 'bg-red-100 text-red-800'
                }`}>
                  {excursao.status === 'ATIVA' ? 'Disponível' :
                   excursao.status === 'INATIVA' ? 'Indisponível' : 'Cancelada'}
                </span>
              </div>

              {/* Price */}
              <div className="border-t border-gray-200 pt-4">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="text-3xl font-bold text-primary-600">
                      {formatCurrency(excursao.preco)}
                    </span>
                    {excursao.precoMenor && (
                      <div className="text-sm text-gray-600">
                        Criança: {formatCurrency(excursao.precoMenor)}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Details */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                Detalhes da Excursão
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div className="flex items-center">
                  <Calendar className="h-5 w-5 text-gray-400 mr-3" />
                  <div>
                    <div className="text-sm text-gray-600">Data de Ida</div>
                    <div className="font-medium">{formatDate(excursao.dataIda)}</div>
                  </div>
                </div>

                {excursao.dataVolta && (
                  <div className="flex items-center">
                    <Calendar className="h-5 w-5 text-gray-400 mr-3" />
                    <div>
                      <div className="text-sm text-gray-600">Data de Volta</div>
                      <div className="font-medium">{formatDate(excursao.dataVolta)}</div>
                    </div>
                  </div>
                )}

                <div className="flex items-center">
                  <Clock className="h-5 w-5 text-gray-400 mr-3" />
                  <div>
                    <div className="text-sm text-gray-600">Horário de Saída</div>
                    <div className="font-medium">{excursao.horarioSaida}</div>
                  </div>
                </div>

                <div className="flex items-center">
                  <MapPin className="h-5 w-5 text-gray-400 mr-3" />
                  <div>
                    <div className="text-sm text-gray-600">Local de Saída</div>
                    <div className="font-medium">{excursao.localSaida}</div>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-3">
                  Descrição
                </h3>
                <div className="prose max-w-none text-gray-700">
                  {excursao.descricao.split('\n').map((paragraph, index) => (
                    <p key={index} className="mb-3">
                      {paragraph}
                    </p>
                  ))}
                </div>
              </div>
            </div>

            {/* Organizador Info */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                Sobre o Organizador
              </h2>
              
              <div className="flex items-start space-x-4">
                <div className="w-16 h-16 bg-primary-600 rounded-full flex items-center justify-center">
                  <span className="text-white font-semibold text-lg">
                    {excursao.organizador.nomeEmpresa.charAt(0)}
                  </span>
                </div>
                
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-900 mb-1">
                    {excursao.organizador.nomeEmpresa}
                  </h3>
                  <p className="text-gray-600 mb-3">
                    Responsável: {excursao.organizador.nome}
                  </p>
                  
                  {excursao.organizador.descricao && (
                    <p className="text-gray-700 mb-3">
                      {excursao.organizador.descricao}
                    </p>
                  )}
                  
                  <div className="flex items-center space-x-4 text-sm text-gray-600">
                    {excursao.organizador.telefone && (
                      <div className="flex items-center">
                        <Phone className="h-4 w-4 mr-1" />
                        <span>{excursao.organizador.telefone}</span>
                      </div>
                    )}
                    <div className="flex items-center">
                      <Mail className="h-4 w-4 mr-1" />
                      <span>{excursao.organizador.email}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Sidebar - Booking */}
          <div className="lg:col-span-1">
            <div className="sticky top-6">
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="mb-6">
                  <div className="text-2xl font-bold text-primary-600 mb-2">
                    {formatCurrency(excursao.preco)}
                  </div>
                  {excursao.precoMenor && (
                    <div className="text-sm text-gray-600">
                      Criança: {formatCurrency(excursao.precoMenor)}
                    </div>
                  )}
                </div>

                {isDisponivel ? (
                  <>
                    {session ? (
                      <button
                        onClick={() => setShowInscricaoForm(true)}
                        className="btn-primary w-full mb-4"
                      >
                        Inscrever-se Agora
                      </button>
                    ) : (
                      <div className="space-y-3 mb-4">
                        <button
                          onClick={() => router.push('/auth/login')}
                          className="btn-primary w-full"
                        >
                          Entrar para se Inscrever
                        </button>
                        <button
                          onClick={() => router.push('/auth/register')}
                          className="btn-outline w-full"
                        >
                          Criar Conta
                        </button>
                      </div>
                    )}
                  </>
                ) : (
                  <button disabled className="btn-secondary w-full mb-4 opacity-50 cursor-not-allowed">
                    {excursao.status === 'CANCELADA' ? 'Excursão Cancelada' : 'Esgotado'}
                  </button>
                )}

                {/* Security Info */}
                <div className="border-t border-gray-200 pt-4 space-y-3">
                  <div className="flex items-center text-sm text-gray-600">
                    <Shield className="h-4 w-4 mr-2 text-green-500" />
                    <span>Pagamento 100% seguro</span>
                  </div>
                  <div className="flex items-center text-sm text-gray-600">
                    <Shield className="h-4 w-4 mr-2 text-green-500" />
                    <span>Cancelamento gratuito até 24h</span>
                  </div>
                  <div className="flex items-center text-sm text-gray-600">
                    <Star className="h-4 w-4 mr-2 text-yellow-500" />
                    <span>Organizador verificado</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Inscription Modal */}
      {showInscricaoForm && (
        <InscricaoForm
          excursao={excursao}
          onClose={() => setShowInscricaoForm(false)}
          onSuccess={() => {
            setShowInscricaoForm(false);
            loadExcursao(); // Reload to update available spots
          }}
        />
      )}
    </Layout>
  );
};

export default ExcursaoDetailsPage;

//components/Excursoes/ExcursaoCard.tsx
import React from 'react';
import Image from 'next/image';
import { MapPin, Calendar, Users, Clock } from 'lucide-react';
import { Excursao } from '../../types';
import { formatCurrency, formatDate } from '../../lib/api';

interface ExcursaoCardProps {
  excursao: Excursao;
  onClick: () => void;
}

const ExcursaoCard: React.FC<ExcursaoCardProps> = ({ excursao, onClick }) => {
  const isDisponivel = excursao.status === 'ATIVA' && excursao.vagasDisponiveis > 0;

  return (
    <div 
      className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow cursor-pointer"
      onClick={onClick}
    >
      {/* Image */}
      <div className="relative h-48">
        {excursao.imagens && excursao.imagens.length > 0 ? (
          <Image
            src={excursao.imagens[0]}
            alt={excursao.titulo}
            fill
            className="object-cover"
          />
        ) : (
          <div className="w-full h-full bg-gray-200 flex items-center justify-center">
            <MapPin className="h-12 w-12 text-gray-400" />
          </div>
        )}
        
        {/* Status Badge */}
        <div className="absolute top-3 right-3">
          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
            isDisponivel
              ? 'bg-green-100 text-green-800'
              : 'bg-red-100 text-red-800'
          }`}>
            {isDisponivel ? 'Disponível' : 'Esgotado'}
          </span>
        </div>
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">
          {excursao.titulo}
        </h3>
        
        <div className="space-y-2 mb-4">
          <div className="flex items-center text-sm text-gray-600">
            <MapPin className="h-4 w-4 mr-2 text-gray-400" />
            <span>{excursao.destino}</span>
          </div>
          
          <div className="flex items-center text-sm text-gray-600">
            <Calendar className="h-4 w-4 mr-2 text-gray-400" />
            <span>{formatDate(excursao.dataIda)}</span>
          </div>
          
          <div className="flex items-center text-sm text-gray-600">
            <Clock className="h-4 w-4 mr-2 text-gray-400" />
            <span>{excursao.horarioSaida}</span>
          </div>
          
          <div className="flex items-center text-sm text-gray-600">
            <Users className="h-4 w-4 mr-2 text-gray-400" />
            <span>{excursao.vagasDisponiveis} vagas disponíveis</span>
          </div>
        </div>

        {/* Price and Action */}
        <div className="flex items-center justify-between">
          <div>
            <span className="text-xl font-bold text-primary-600">
              {formatCurrency(excursao.preco)}
            </span>
            {excursao.precoMenor && (
              <div className="text-xs text-gray-500">
                Criança: {formatCurrency(excursao.precoMenor)}
              </div>
            )}
          </div>
          
          <button 
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              isDisponivel
                ? 'bg-primary-600 text-white hover:bg-primary-700'
                : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }`}
            disabled={!isDisponivel}
          >
            {isDisponivel ? 'Ver Detalhes' : 'Indisponível'}
          </button>
        </div>

        {/* Organizer */}
        <div className="mt-3 pt-3 border-t border-gray-100">
          <div className="text-xs text-gray-500">
            Organizado por <span className="font-medium">{excursao.organizador.nomeEmpresa}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExcursaoCard;

//components/Excursoes/ExcursaoFilters.tsx
import React from 'react';
import { X } from 'lucide-react';

interface Filters {
  destino: string;
  precoMin: string;
  precoMax: string;
  dataInicio: string;
  dataFim: string;
  status: string;
}

interface ExcursaoFiltersProps {
  filters: Filters;
  onFiltersChange: (filters: Filters) => void;
}

const ExcursaoFilters: React.FC<ExcursaoFiltersProps> = ({ filters, onFiltersChange }) => {
  const handleFilterChange = (key: keyof Filters, value: string) => {
    onFiltersChange({
      ...filters,
      [key]: value,
    });
  };

  const clearFilters = () => {
    onFiltersChange({
      destino: '',
      precoMin: '',
      precoMax: '',
      dataInicio: '',
      dataFim: '',
      status: 'ATIVA',
    });
  };

  const hasActiveFilters = Object.values(filters).some(value => value && value !== 'ATIVA');

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-gray-900">Filtros</h3>
        {hasActiveFilters && (
          <button
            onClick={clearFilters}
            className="flex items-center text-sm text-gray-600 hover:text-gray-900"
          >
            <X className="h-4 w-4 mr-1" />
            Limpar filtros
          </button>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {/* Destino */}
        <div>
          <label className="form-label">Destino</label>
          <input
            type="text"
            placeholder="Ex: Rio de Janeiro"
            value={filters.destino}
            onChange={(e) => handleFilterChange('destino', e.target.value)}
            className="form-input"
          />
        </div>

        {/* Preço Mínimo */}
        <div>
          <label className="form-label">Preço Mínimo</label>
          <input
            type="number"
            placeholder="0"
            value={filters.precoMin}
            onChange={(e) => handleFilterChange('precoMin', e.target.value)}
            className="form-input"
          />
        </div>

        {/* Preço Máximo */}
        <div>
          <label className="form-label">Preço Máximo</label>
          <input
            type="number"
            placeholder="1000"
            value={filters.precoMax}
            onChange={(e) => handleFilterChange('precoMax', e.target.value)}
            className="form-input"
          />
        </div>

        {/* Status */}
        <div>
          <label className="form-label">Status</label>
          <select
            value={filters.status}
            onChange={(e) => handleFilterChange('status', e.target.value)}
            className="form-input"
          >
            <option value="">Todos</option>
            <option value="ATIVA">Disponível</option>
            <option value="INATIVA">Indisponível</option>
            <option value="CANCELADA">Cancelada</option>
          </select>
        </div>

        {/* Data Início */}
        <div>
          <label className="form-label">Data Inicial</label>
          <input
            type="date"
            value={filters.dataInicio}
            onChange={(e) => handleFilterChange('dataInicio', e.target.value)}
            className="form-input"
          />
        </div>

        {/* Data Fim */}
        <div>
          <label className="form-label">Data Final</label>
          <input
            type="date"
            value={filters.dataFim}
            onChange={(e) => handleFilterChange('dataFim', e.target.value)}
            className="form-input"
          />
        </div>
      </div>
    </div>
  );
};

export default ExcursaoFilters;

//components/Excursoes/ImageGallery.tsx
import React, { useState } from 'react';
import Image from 'next/image';
import { ChevronLeft, ChevronRight, X } from 'lucide-react';

interface ImageGalleryProps {
  images: string[];
  title: string;
}

const ImageGallery: React.FC<ImageGalleryProps> = ({ images, title }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showModal, setShowModal] = useState(false);

  if (!images || images.length === 0) {
    return (
      <div className="h-64 bg-gray-200 rounded-lg flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-gray-300 rounded-lg mx-auto mb-2"></div>
          <p className="text-gray-500">Nenhuma imagem disponível</p>
        </div>
      </div>
    );
  }

  const nextImage = () => {
    setCurrentIndex((prev) => (prev + 1) % images.length);
  };

  const prevImage = () => {
    setCurrentIndex((prev) => (prev - 1 + images.length) % images.length);
  };

  return (
    <>
      <div className="relative">
        {/* Main Image */}
        <div className="relative h-64 md:h-96 rounded-lg overflow-hidden">
          <Image
            src={images[currentIndex]}
            alt={`${title} - Imagem ${currentIndex + 1}`}
            fill
            className="object-cover cursor-pointer"
            onClick={() => setShowModal(true)}
          />
          
          {/* Navigation Arrows */}
          {images.length > 1 && (
            <>
              <button
                onClick={prevImage}
                className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-75 transition-opacity"
              >
                <ChevronLeft className="h-5 w-5" />
              </button>
              <button
                onClick={nextImage}
                className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-75 transition-opacity"
              >
                <ChevronRight className="h-5 w-5" />
              </button>
            </>
          )}

          {/* Image Counter */}
          {images.length > 1 && (
            <div className="absolute bottom-4 right-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded-full text-sm">
              {currentIndex + 1} / {images.length}
            </div>
          )}
        </div>

        {/* Thumbnail Grid */}
        {images.length > 1 && (
          <div className="grid grid-cols-4 md:grid-cols-6 gap-2 mt-4">
            {images.map((image, index) => (
              <div
                key={index}
                className={`relative h-16 md:h-20 rounded-lg overflow-hidden cursor-pointer border-2 transition-all ${
                  index === currentIndex ? 'border-primary-600' : 'border-transparent'
                }`}
                onClick={() => setCurrentIndex(index)}
              >
                <Image
                  src={image}
                  alt={`${title} - Thumbnail ${index + 1}`}
                  fill
                  className="object-cover"
                />
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center">
          <div className="relative w-full h-full flex items-center justify-center p-4">
            {/* Close Button */}
            <button
              onClick={() => setShowModal(false)}
              className="absolute top-4 right-4 text-white p-2 hover:bg-white hover:bg-opacity-20 rounded-full transition-colors z-10"
            >
              <X className="h-6 w-6" />
            </button>

            {/* Image */}
            <div className="relative max-w-4xl max-h-full">
              <Image
                src={images[currentIndex]}
                alt={`${title} - Imagem ${currentIndex + 1}`}
                width={1200}
                height={800}
                className="object-contain max-h-[80vh]"
              />
            </div>

            {/* Navigation */}
            {images.length > 1 && (
              <>
                <button
                  onClick={prevImage}
                  className="absolute left-4 top-1/2 transform -translate-y-1/2 text-white p-3 hover:bg-white hover:bg-opacity-20 rounded-full transition-colors"
                >
                  <ChevronLeft className="h-8 w-8" />
                </button>
                <button
                  onClick={nextImage}
                  className="absolute right-4 top-1/2 transform -translate-y-1/2 text-white p-3 hover:bg-white hover:bg-opacity-20 rounded-full transition-colors"
                >
                  <ChevronRight className="h-8 w-8" />
                </button>
              </>
            )}

            {/* Counter */}
            <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white bg-black bg-opacity-50 px-4 py-2 rounded-full">
              {currentIndex + 1} / {images.length}
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default ImageGallery;

//components/Excursoes/InscricaoForm.tsx
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { X, User, Phone, FileText, Users, CreditCard } from 'lucide-react';
import { Excursao } from '../../types';
import { excursoesService, pagamentosService, formatCurrency } from '../../lib/api';
import toast from 'react-hot-toast';

interface InscricaoFormProps {
  excursao: Excursao;
  onClose: () => void;
  onSuccess: () => void;
}

interface InscricaoData {
  nomeCompleto: string;
  telefone: string;
  documento: string;
  quantidadePessoas: number;
  observacoes?: string;
}

const InscricaoForm: React.FC<InscricaoFormProps> = ({ excursao, onClose, onSuccess }) => {
  const [step, setStep] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [inscricaoId, setInscricaoId] = useState<string>('');
  
  const { register, handleSubmit, watch, formState: { errors } } = useForm<InscricaoData>({
    defaultValues: {
      quantidadePessoas: 1,
    },
  });

  const quantidadePessoas = watch('quantidadePessoas');
  const valorTotal = quantidadePessoas * excursao.preco;

  const onSubmitInscricao = async (data: InscricaoData) => {
    setIsLoading(true);
    
    try {
      const response = await excursoesService.inscreverse(excursao.id, data);
      setInscricaoId(response.data.id);
      setStep(2);
      toast.success('Inscrição realizada com sucesso!');
    } catch (error: any) {
      toast.error(error.response?.data?.message || 'Erro ao realizar inscrição');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePagamentoPix = async () => {
    setIsLoading(true);
    
    try {
      const response = await pagamentosService.criarPagamentoPix(inscricaoId);
      const { pixQrCode, pixCopiaeCola } = response.data;
      
      // Aqui você pode abrir um modal com o QR Code do PIX
      // Por simplicidade, vamos apenas mostrar o código copia e cola
      navigator.clipboard.writeText(pixCopiaeCola);
      toast.success('Código PIX copiado! Cole no seu banco para pagar.');
      
      onSuccess();
    } catch (error: any) {
      toast.error(error.response?.data?.message || 'Erro ao gerar pagamento PIX');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePagamentoCartao = async () => {
    setIsLoading(true);
    
    try {
      // Aqui você integraria com o Mercado Pago Card Token
      // Por simplicidade, vamos simular
      toast.info('Redirecionando para pagamento com cartão...');
      
      // Simular pagamento com cartão
      setTimeout(() => {
        toast.success('Pagamento processado com sucesso!');
        onSuccess();
      }, 2000);
    } catch (error: any) {
      toast.error(error.response?.data?.message || 'Erro ao processar pagamento');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">
            {step === 1 ? 'Dados da Inscrição' : 'Pagamento'}
          </h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        <div className="p-6">
          {step === 1 ? (
            /* Step 1: Inscription Form */
            <form onSubmit={handleSubmit(onSubmitInscricao)} className="space-y-6">
              {/* Excursion Summary */}
              <div className="bg-gray-50 rounded-lg p-4">
                <h3 className="font-semibold text-gray-900 mb-2">{excursao.titulo}</h3>
                <div className="text-sm text-gray-600 space-y-1">
                  <div>Destino: {excursao.destino}</div>
                  <div>Data: {new Date(excursao.dataIda).toLocaleDateString('pt-BR')}</div>
                  <div>Horário: {excursao.horarioSaida}</div>
                  <div>Local de saída: {excursao.localSaida}</div>
                </div>
              </div>

              {/* Form Fields */}
              <div className="space-y-4">
                <div>
                  <label className="form-label">
                    <User className="inline h-4 w-4 mr-1" />
                    Nome Completo
                  </label>
                  <input
                    type="text"
                    className="form-input"
                    {...register('nomeCompleto', {
                      required: 'Nome completo é obrigatório',
                    })}
                  />
                  {errors.nomeCompleto && (
                    <p className="mt-1 text-sm text-red-600">{errors.nomeCompleto.message}</p>
                  )}
                </div>

                <div>
                  <label className="form-label">
                    <Phone className="inline h-4 w-4 mr-1" />
                    Telefone
                  </label>
                  <input
                    type="tel"
                    placeholder="(11) 99999-9999"
                    className="form-input"
                    {...register('telefone', {
                      required: 'Telefone é obrigatório',
                    })}
                  />
                  {errors.telefone && (
                    <p className="mt-1 text-sm text-red-600">{errors.telefone.message}</p>
                  )}
                </div>

                <div>
                  <label className="form-label">
                    <FileText className="inline h-4 w-4 mr-1" />
                    CPF ou RG
                  </label>
                  <input
                    type="text"
                    placeholder="000.000.000-00"
                    className="form-input"
                    {...register('documento', {
                      required: 'Documento é obrigatório',
                    })}
                  />
                  {errors.documento && (
                    <p className="mt-1 text-sm text-red-600">{errors.documento.message}</p>
                  )}
                </div>

                <div>
                  <label className="form-label">
                    <Users className="inline h-4 w-4 mr-1" />
                    Quantidade de Pessoas
                  </label>
                  <select
                    className="form-input"
                    {...register('quantidadePessoas', {
                      required: 'Quantidade é obrigatória',
                      min: { value: 1, message: 'Mínimo 1 pessoa' },
                      max: { 
                        value: excursao.vagasDisponiveis, 
                        message: `Máximo ${excursao.vagasDisponiveis} pessoas` 
                      },
                    })}
                  >
                    {Array.from({ length: Math.min(excursao.vagasDisponiveis, 10) }, (_, i) => (
                      <option key={i + 1} value={i + 1}>
                        {i + 1} {i === 0 ? 'pessoa' : 'pessoas'}
                      </option>
                    ))}
                  </select>
                  {errors.quantidadePessoas && (
                    <p className="mt-1 text-sm text-red-600">{errors.quantidadePessoas.message}</p>
                  )}
                </div>

                <div>
                  <label className="form-label">Observações (Opcional)</label>
                  <textarea
                    rows={3}
                    className="form-input"
                    placeholder="Alguma observação especial..."
                    {...register('observacoes')}
                  />
                </div>
              </div>

              {/* Total */}
              <div className="border-t border-gray-200 pt-4">
                <div className="flex justify-between items-center text-lg font-semibold">
                  <span>Total:</span>
                  <span className="text-primary-600">{formatCurrency(valorTotal)}</span>
                </div>
                <div className="text-sm text-gray-600 mt-1">
                  {quantidadePessoas} × {formatCurrency(excursao.preco)}
                </div>
              </div>

              {/* Actions */}
              <div className="flex space-x-3">
                <button
                  type="button"
                  onClick={onClose}
                  className="btn-outline flex-1"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  disabled={isLoading}
                  className="btn-primary flex-1"
                >
                  {isLoading ? 'Processando...' : 'Continuar para Pagamento'}
                </button>
              </div>
            </form>
          ) : (
            /* Step 2: Payment */
            <div className="space-y-6">
              {/* Summary */}
              <div className="bg-gray-50 rounded-lg p-4">
                <h3 className="font-semibold text-gray-900 mb-2">Resumo da Inscrição</h3>
                <div className="text-sm text-gray-600 space-y-1">
                  <div>Excursão: {excursao.titulo}</div>
                  <div>Quantidade: {quantidadePessoas} pessoas</div>
                  <div className="font-semibold text-lg text-gray-900">
                    Total: {formatCurrency(valorTotal)}
                  </div>
                </div>
              </div>

              {/* Payment Options */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-900">
                  Escolha a forma de pagamento
                </h3>

                <div className="space-y-3">
                  <button
                    onClick={handlePagamentoPix}
                    disabled={isLoading}
                    className="w-full p-4 border border-gray-300 rounded-lg hover:bg-gray-50 flex items-center justify-between group"
                  >
                    <div className="flex items-center">
                      <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4">
                        <CreditCard className="h-6 w-6 text-green-600" />
                      </div>
                      <div className="text-left">
                        <div className="font-medium text-gray-900">PIX</div>
                        <div className="text-sm text-gray-600">Aprovação instantânea</div>
                      </div>
                    </div>
                    <div className="text-primary-600 group-hover:text-primary-700">
                      →
                    </div>
                  </button>

                  <button
                    onClick={handlePagamentoCartao}
                    disabled={isLoading}
                    className="w-full p-4 border border-gray-300 rounded-lg hover:bg-gray-50 flex items-center justify-between group"
                  >
                    <div className="flex items-center">
                      <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mr-4">
                        <CreditCard className="h-6 w-6 text-blue-600" />
                      </div>
                      <div className="text-left">
                        <div className="font-medium text-gray-900">Cartão de Crédito</div>
                        <div className="text-sm text-gray-600">Parcelamento disponível</div>
                      </div>
                    </div>
                    <div className="text-primary-600 group-hover:text-primary-700">
                      →
                    </div>
                  </button>
                </div>
              </div>

              {/* Actions */}
              <div className="flex space-x-3">
                <button
                  onClick={() => setStep(1)}
                  className="btn-outline flex-1"
                >
                  Voltar
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default InscricaoForm;

//pages/organizador/dashboard.tsx
import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import Layout from '../../components/Layout';
import DashboardStats from '../../components/Dashboard/DashboardStats';
import RecentActivity from '../../components/Dashboard/RecentActivity';
import QuickActions from '../../components/Dashboard/QuickActions';
import { 
  TrendingUp, 
  Users, 
  MapPin, 
  DollarSign,
  Calendar,
  AlertCircle
} from 'lucide-react';
import { organizadorService } from '../../lib/api';
import { DashboardData } from '../../types';
import toast from 'react-hot-toast';

const OrganizadorDashboard: React.FC = () => {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/login');
      return;
    }

    if (session?.userType !== 'ORGANIZADOR') {
      router.push('/');
      return;
    }

    loadDashboardData();
  }, [session, status]);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      const response = await organizadorService.getDashboard();
      setDashboardData(response.data);
    } catch (error) {
      toast.error('Erro ao carregar dados do dashboard');
    } finally {
      setLoading(false);
    }
  };

  if (status === 'loading' || loading) {
    return (
      <Layout showSidebar={true}>
        <div className="animate-pulse space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="h-32 bg-gray-200 rounded-lg"></div>
            ))}
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="h-96 bg-gray-200 rounded-lg"></div>
            <div className="h-96 bg-gray-200 rounded-lg"></div>
          </div>
        </div>
      </Layout>
    );
  }

  const stats = [
    {
      title: 'Total de Excursões',
      value: dashboardData?.totalExcursoes || 0,
      icon: MapPin,
      color: 'blue',
      change: '+12%',
      changeType: 'positive' as const,
    },
    {
      title: 'Excursões Ativas',
      value: dashboardData?.excursoesAtivas || 0,
      icon: Calendar,
      color: 'green',
      change: '+5%',
      changeType: 'positive' as const,
    },
    {
      title: 'Total de Inscrições',
      value: dashboardData?.totalInscricoes || 0,
      icon: Users,
      color: 'purple',
      change: '+23%',
      changeType: 'positive' as const,
    },
    {
      title: 'Receita Total',
      value: new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL',
      }).format(dashboardData?.receitaTotal || 0),
      icon: DollarSign,
      color: 'emerald',
      change: '+15%',
      changeType: 'positive' as const,
    },
  ];

  return (
    <Layout 
      showSidebar={true}
      title="Dashboard"
      description="Visão geral do seu negócio"
    >
      <div className="space-y-6">
        {/* Welcome Message */}
        <div className="bg-gradient-to-r from-primary-600 to-secondary-600 rounded-lg p-6 text-white">
          <h2 className="text-2xl font-bold mb-2">
            Bem-vindo de volta, {session?.user?.name?.split(' ')[0]}!
          </h2>
          <p className="text-primary-100">
            Aqui está um resumo da atividade da sua empresa de excursões.
          </p>
        </div>

        {/* Stats Cards */}
        <DashboardStats stats={stats} />

        {/* Quick Actions */}
        <QuickActions />

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Recent Activity */}
          <div className="card p-6">
            <h3 className="section-title">Atividade Recente</h3>
            <RecentActivity 
              inscricoes={dashboardData?.inscricoesRecentes || []}
            />
          </div>

          {/* Próximas Excursões */}
          <div className="card p-6">
            <h3 className="section-title">Próximas Excursões</h3>
            {dashboardData?.proximasExcursoes && dashboardData.proximasExcursoes.length > 0 ? (
              <div className="space-y-4">
                {dashboardData.proximasExcursoes.slice(0, 5).map((excursao) => (
                  <div 
                    key={excursao.id}
                    className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer"
                    onClick={() => router.push(`/organizador/excursoes/${excursao.id}`)}
                  >
                    <div>
                      <h4 className="font-medium text-gray-900">{excursao.titulo}</h4>
                      <p className="text-sm text-gray-600">{excursao.destino}</p>
                      <p className="text-sm text-gray-500">
                        {new Date(excursao.dataIda).toLocaleDateString('pt-BR')}
                      </p>
                    </div>
                    <div className="text-right">
                      <div className="text-sm font-medium text-gray-900">
                        {excursao.vagasDisponiveis}/{excursao.vagasTotal} vagas
                      </div>
                      <div className={`text-sm ${
                        excursao.status === 'ATIVA' ? 'text-green-600' : 'text-gray-500'
                      }`}>
                        {excursao.status}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <Calendar className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-600">Nenhuma excursão agendada</p>
                <button
                  onClick={() => router.push('/organizador/excursoes/nova')}
                  className="btn-primary mt-3"
                >
                  Criar Nova Excursão
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Alerts */}
        {dashboardData && (
          <div className="space-y-4">
            {dashboardData.excursoesAtivas === 0 && (
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 flex items-start">
                <AlertCircle className="h-5 w-5 text-yellow-600 mt-0.5 mr-3" />
                <div>
                  <h4 className="text-sm font-medium text-yellow-800">
                    Nenhuma excursão ativa
                  </h4>
                  <p className="text-sm text-yellow-700 mt-1">
                    Crie novas excursões para começar a receber inscrições.
                  </p>
                </div>
              </div>
            )}

            {dashboardData.inscricoesConfirmadas === 0 && dashboardData.totalInscricoes > 0 && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 flex items-start">
                <AlertCircle className="h-5 w-5 text-blue-600 mt-0.5 mr-3" />
                <div>
                  <h4 className="text-sm font-medium text-blue-800">
                    Inscrições pendentes de confirmação
                  </h4>
                  <p className="text-sm text-blue-700 mt-1">
                    Você tem inscrições aguardando confirmação de pagamento.
                  </p>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </Layout>
  );
};

export default OrganizadorDashboard;

//pages/cliente/dashboard.tsx
import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import Layout from '../../components/Layout';
import { 
  Calendar, 
  MapPin, 
  Clock, 
  CreditCard,
  Star,
  Compass
} from 'lucide-react';
import { clienteService, formatCurrency, formatDate } from '../../lib/api';
import { Inscricao } from '../../types';
import toast from 'react-hot-toast';

const ClienteDashboard: React.FC = () => {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [inscricoes, setInscricoes] = useState<Inscricao[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/login');
      return;
    }

    if (session?.userType !== 'CLIENTE') {
      router.push('/');
      return;
    }

    loadInscricoes();
  }, [session, status]);

  const loadInscricoes = async () => {
    try {
      setLoading(true);
      const response = await clienteService.getInscricoes({ size: 10 });
      setInscricoes(response.data.content || []);
    } catch (error) {
      toast.error('Erro ao carregar inscrições');
    } finally {
      setLoading(false);
    }
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      CONFIRMADA: { color: 'bg-green-100 text-green-800', label: 'Confirmada' },
      PENDENTE: { color: 'bg-yellow-100 text-yellow-800', label: 'Pendente' },
      CANCELADA: { color: 'bg-red-100 text-red-800', label: 'Cancelada' },
    };

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.PENDENTE;
    
    return (
      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${config.color}`}>
        {config.label}
      </span>
    );
  };

  if (status === 'loading' || loading) {
    return (
      <Layout showSidebar={true}>
        <div className="animate-pulse space-y-6">
          <div className="h-32 bg-gray-200 rounded-lg"></div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="h-96 bg-gray-200 rounded-lg"></div>
            <div className="h-96 bg-gray-200 rounded-lg"></div>
          </div>
        </div>
      </Layout>
    );
  }

  const inscricoesConfirmadas = inscricoes.filter(i => i.status === 'CONFIRMADA');
  const inscricoesPendentes = inscricoes.filter(i => i.status === 'PENDENTE');
  const proximasViagens = inscricoesConfirmadas
    .filter(i => new Date(i.excursao.dataIda) > new Date())
    .sort((a, b) => new Date(a.excursao.dataIda).getTime() - new Date(b.excursao.dataIda).getTime());

  return (
    <Layout 
      showSidebar={true}
      title="Meu Dashboard"
      description="Acompanhe suas excursões e viagens"
    >
      <div className="space-y-6">
        {/* Welcome Message */}
        <div className="bg-gradient-to-r from-primary-600 to-secondary-600 rounded-lg p-6 text-white">
          <h2 className="text-2xl font-bold mb-2">
            Olá, {session?.user?.name?.split(' ')[0]}!
          </h2>
          <p className="text-primary-100">
            Pronto para sua próxima aventura? Veja suas excursões aqui.
          </p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="card p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Calendar className="h-6 w-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total de Excursões</p>
                <p className="text-2xl font-bold text-gray-900">{inscricoes.length}</p>
              </div>
            </div>
          </div>

          <div className="card p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <MapPin className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Confirmadas</p>
                <p className="text-2xl font-bold text-gray-900">{inscricoesConfirmadas.length}</p>
              </div>
            </div>
          </div>

          <div className="card p-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <Clock className="h-6 w-6 text-yellow-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Pendentes</p>
                <p className="text-2xl font-bold text-gray-900">{inscricoesPendentes.length}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Próximas Viagens */}
          <div className="card p-6">
            <h3 className="section-title">Próximas Viagens</h3>
            {proximasViagens.length > 0 ? (
              <div className="space-y-4">
                {proximasViagens.slice(0, 3).map((inscricao) => (
                  <div 
                    key={inscricao.id}
                    className="p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer"
                    onClick={() => router.push(`/excursoes/${inscricao.excursao.id}`)}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <h4 className="font-medium text-gray-900 mb-1">
                          {inscricao.excursao.titulo}
                        </h4>
                        <div className="flex items-center text-sm text-gray-600 mb-2">
                          <MapPin className="h-4 w-4 mr-1" />
                          <span>{inscricao.excursao.destino}</span>
                        </div>
                        <div className="flex items-center text-sm text-gray-600">
                          <Calendar className="h-4 w-4 mr-1" />
                          <span>{formatDate(inscricao.excursao.dataIda)}</span>
                          <Clock className="h-4 w-4 ml-3 mr-1" />
                          <span>{inscricao.excursao.horarioSaida}</span>
                        </div>
                      </div>
                      <div className="text-right">
                        {getStatusBadge(inscricao.status)}
                        <div className="text-sm font-medium text-gray-900 mt-1">
                          {inscricao.quantidadePessoas} pessoa{inscricao.quantidadePessoas > 1 ? 's' : ''}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                
                {proximasViagens.length > 3 && (
                  <button
                    onClick={() => router.push('/cliente/inscricoes')}
                    className="w-full text-center py-2 text-primary-600 hover:text-primary-700 font-medium"
                  >
                    Ver todas as viagens →
                  </button>
                )}
              </div>
            ) : (
              <div className="text-center py-8">
                <Compass className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-600 mb-4">Nenhuma viagem agendada</p>
                <button
                  onClick={() => router.push('/excursoes')}
                  className="btn-primary"
                >
                  Explorar Excursões
                </button>
              </div>
            )}
          </div>

          {/* Histórico Recente */}
          <div className="card p-6">
            <h3 className="section-title">Histórico Recente</h3>
            {inscricoes.length > 0 ? (
              <div className="space-y-4">
                {inscricoes.slice(0, 5).map((inscricao) => (
                  <div key={inscricao.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900 text-sm">
                        {inscricao.excursao.titulo}
                      </h4>
                      <p className="text-xs text-gray-600">
                        {formatDate(inscricao.createdAt)}
                      </p>
                    </div>
                    <div className="text-right">
                      {getStatusBadge(inscricao.status)}
                      <div className="text-xs text-gray-600 mt-1">
                        {formatCurrency(inscricao.valorTotal)}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <Star className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-600">Nenhuma inscrição ainda</p>
              </div>
            )}
          </div>
        </div>

        {/* Action Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div 
            className="card p-6 hover:shadow-md transition-shadow cursor-pointer"
            onClick={() => router.push('/excursoes')}
          >
            <div className="flex items-center">
              <div className="p-3 bg-primary-100 rounded-lg">
                <Compass className="h-6 w-6 text-primary-600" />
              </div>
              <div className="ml-4">
                <h3 className="font-medium text-gray-900">Explorar Excursões</h3>
                <p className="text-sm text-gray-600">Descubra novos destinos</p>
              </div>
            </div>
          </div>

          <div 
            className="card p-6 hover:shadow-md transition-shadow cursor-pointer"
            onClick={() => router.push('/cliente/inscricoes')}
          >
            <div className="flex items-center">
              <div className="p-3 bg-green-100 rounded-lg">
                <Calendar className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <h3 className="font-medium text-gray-900">Minhas Inscrições</h3>
                <p className="text-sm text-gray-600">Gerencie suas viagens</p>
              </div>
            </div>
          </div>

          <div 
            className="card p-6 hover:shadow-md transition-shadow cursor-pointer"
            onClick={() => router.push('/cliente/perfil')}
          >
            <div className="flex items-center">
              <div className="p-3 bg-purple-100 rounded-lg">
                <Star className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <h3 className="font-medium text-gray-900">Meu Perfil</h3>
                <p className="text-sm text-gray-600">Atualizar informações</p>
              </div>
            </div>
          </div>
        </div>

        {/* Pending Payments Alert */}
        {inscricoesPendentes.length > 0 && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-start">
              <CreditCard className="h-5 w-5 text-yellow-600 mt-0.5 mr-3" />
              <div>
                <h4 className="text-sm font-medium text-yellow-800">
                  Pagamentos Pendentes
                </h4>
                <p className="text-sm text-yellow-700 mt-1">
                  Você tem {inscricoesPendentes.length} inscrição{inscricoesPendentes.length > 1 ? 'ões' : ''} aguardando pagamento.
                </p>
                <button
                  onClick={() => router.push('/cliente/inscricoes?status=PENDENTE')}
                  className="mt-2 text-sm font-medium text-yellow-800 hover:text-yellow-900"
                >
                  Ver inscrições pendentes →
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </Layout>
  );
};

export default ClienteDashboard;

//components/Dashboard/DashboardStats.tsx
import React from 'react';
import { LucideIcon } from 'lucide-react';

interface Stat {
  title: string;
  value: string | number;
  icon: LucideIcon;
  color: string;
  change?: string;
  changeType?: 'positive' | 'negative' | 'neutral';
}

interface DashboardStatsProps {
  stats: Stat[];
}

const DashboardStats: React.FC<DashboardStatsProps> = ({ stats }) => {
  const getColorClasses = (color: string) => {
    const colorMap = {
      blue: 'bg-blue-100 text-blue-600',
      green: 'bg-green-100 text-green-600',
      purple: 'bg-purple-100 text-purple-600',
      emerald: 'bg-emerald-100 text-emerald-600',
      yellow: 'bg-yellow-100 text-yellow-600',
      red: 'bg-red-100 text-red-600',
    };
    return colorMap[color as keyof typeof colorMap] || colorMap.blue;
  };

  const getChangeClasses = (changeType?: string) => {
    const changeMap = {
      positive: 'text-green-600',
      negative: 'text-red-600',
      neutral: 'text-gray-600',
    };
    return changeMap[changeType as keyof typeof changeMap] || changeMap.neutral;
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      {stats.map((stat, index) => {
        const Icon = stat.icon;
        return (
          <div key={index} className="card p-6">
            <div className="flex items-center">
              <div className={`p-3 rounded-lg ${getColorClasses(stat.color)}`}>
                <Icon className="h-6 w-6" />
              </div>
              <div className="ml-4 flex-1">
                <p className="text-sm font-medium text-gray-600">{stat.title}</p>
                <div className="flex items-baseline">
                  <p className="text-2xl font-bold text-gray-900">{stat.value}</p>
                  {stat.change && (
                    <p className={`ml-2 text-sm font-medium ${getChangeClasses(stat.changeType)}`}>
                      {stat.change}
                    </p>
                  )}
                </div>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default DashboardStats;

//components/Dashboard/QuickActions.tsx
import React from 'react';
import { useRouter } from 'next/router';
import { Plus, Users, BarChart3, Bell, Settings } from 'lucide-react';

const QuickActions: React.FC = () => {
  const router = useRouter();

  const actions = [
    {
      title: 'Nova Excursão',
      description: 'Criar uma nova excursão',
      icon: Plus,
      color: 'bg-primary-600 hover:bg-primary-700',
      href: '/organizador/excursoes/nova',
    },
    {
      title: 'Ver Inscrições',
      description: 'Gerenciar inscrições',
      icon: Users,
      color: 'bg-green-600 hover:bg-green-700',
      href: '/organizador/inscricoes',
    },
    {
      title: 'Relatórios',
      description: 'Visualizar relatórios',
      icon: BarChart3,
      color: 'bg-purple-600 hover:bg-purple-700',
      href: '/organizador/relatorios',
    },
    {
      title: 'Notificações',
      description: 'Enviar notificações',
      icon: Bell,
      color: 'bg-yellow-600 hover:bg-yellow-700',
      href: '/organizador/notificacoes',
    },
  ];

  return (
    <div className="card p-6">
      <h3 className="section-title">Ações Rápidas</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {actions.map((action, index) => {
          const Icon = action.icon;
          return (
            <button
              key={index}
              onClick={() => router.push(action.href)}
              className={`p-4 rounded-lg text-white text-left transition-colors ${action.color}`}
            >
              <Icon className="h-6 w-6 mb-2" />
              <h4 className="font-medium mb-1">{action.title}</h4>
              <p className="text-sm opacity-90">{action.description}</p>
            </button>
          );
        })}
      </div>
    </div>
  );
};

export default QuickActions;

//components/Dashboard/RecentActivity.tsx
import React from 'react';
import { formatDate, formatCurrency } from '../../lib/api';
import { Inscricao } from '../../types';
import { Calendar, User, DollarSign } from 'lucide-react';

interface RecentActivityProps {
  inscricoes: Inscricao[];
}

const RecentActivity: React.FC<RecentActivityProps> = ({ inscricoes }) => {
  const getStatusBadge = (status: string) => {
    const statusConfig = {
      CONFIRMADA: { color: 'bg-green-100 text-green-800', label: 'Confirmada' },
      PENDENTE: { color: 'bg-yellow-100 text-yellow-800', label: 'Pendente' },
      CANCELADA: { color: 'bg-red-100 text-red-800', label: 'Cancelada' },
    };

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.PENDENTE;
    
    return (
      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${config.color}`}>
        {config.label}
      </span>
    );
  };

  if (!inscricoes || inscricoes.length === 0) {
    return (
      <div className="text-center py-8">
        <User className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <p className="text-gray-600">Nenhuma atividade recente</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {inscricoes.map((inscricao) => (
        <div 
          key={inscricao.id}
          className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
        >
          <div className="flex-1">
            <div className="flex items-center mb-2">
              <User className="h-4 w-4 text-gray-400 mr-2" />
              <span className="font-medium text-gray-900">{inscricao.nomeCompleto}</span>
            </div>
            
            <div className="flex items-center text-sm text-gray-600 mb-1">
              <Calendar className="h-4 w-4 mr-2" />
              <span>{inscricao.excursao.titulo}</span>
            </div>
            
            <div className="flex items-center text-sm text-gray-600">
              <DollarSign className="h-4 w-4 mr-2" />
              <span>{formatCurrency(inscricao.valorTotal)} • {inscricao.quantidadePessoas} pessoa{inscricao.quantidadePessoas > 1 ? 's' : ''}</span>
            </div>
          </div>
          
          <div className="text-right">
            {getStatusBadge(inscricao.status)}
            <div className="text-xs text-gray-500 mt-1">
              {formatDate(inscricao.createdAt)}
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

export default RecentActivity;

//components/Common/LoadingSpinner.tsx
import React from 'react';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 'md', className = '' }) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
  };

  return (
    <div className={`animate-spin rounded-full border-2 border-gray-300 border-t-primary-600 ${sizeClasses[size]} ${className}`}></div>
  );
};

export default LoadingSpinner;

//components/Common/Modal.tsx
import React, { ReactNode } from 'react';
import { X } from 'lucide-react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const sizeClasses = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl',
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className={`bg-white rounded-lg shadow-lg w-full ${sizeClasses[size]} max-h-[90vh] overflow-y-auto`}>
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">{title}</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {children}
        </div>
      </div>
    </div>
  );
};

export default Modal;

//components/Common/ConfirmDialog.tsx
import React from 'react';
import { AlertTriangle } from 'lucide-react';

interface ConfirmDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  title: string;
  message: string;
  confirmText?: string;
  cancelText?: string;
  type?: 'danger' | 'warning' | 'info';
}

const ConfirmDialog: React.FC<ConfirmDialogProps> = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message,
  confirmText = 'Confirmar',
  cancelText = 'Cancelar',
  type = 'danger',
}) => {
  if (!isOpen) return null;

  const getTypeClasses = () => {
    switch (type) {
      case 'danger':
        return {
          icon: 'text-red-600',
          button: 'btn-danger',
        };
      case 'warning':
        return {
          icon: 'text-yellow-600',
          button: 'bg-yellow-600 text-white hover:bg-yellow-700 focus:ring-yellow-500',
        };
      default:
        return {
          icon: 'text-blue-600',
          button: 'btn-primary',
        };
    }
  };

  const typeClasses = getTypeClasses();

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-lg max-w-md w-full">
        <div className="p-6">
          <div className="flex items-center mb-4">
            <div className={`p-2 rounded-full bg-gray-100 mr-4`}>
              <AlertTriangle className={`h-6 w-6 ${typeClasses.icon}`} />
            </div>
            <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
          </div>
          
          <p className="text-gray-600 mb-6">{message}</p>
          
          <div className="flex space-x-3 justify-end">
            <button
              onClick={onClose}
              className="btn-outline"
            >
              {cancelText}
            </button>
            <button
              onClick={() => {
                onConfirm();
                onClose();
              }}
              className={`btn ${typeClasses.button}`}
            >
              {confirmText}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ConfirmDialog;

//pages/organizador/excursoes/index.tsx
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Layout from '../../../components/Layout';
import ExcursaoCard from '../../../components/Excursoes/ExcursaoCard';
import ConfirmDialog from '../../../components/Common/ConfirmDialog';
import { 
  Plus, 
  Filter, 
  Search, 
  Eye, 
  Edit, 
  Trash2, 
  MoreVertical,
  Calendar,
  MapPin
} from 'lucide-react';
import { excursoesService, formatCurrency, formatDate } from '../../../lib/api';
import { Excursao } from '../../../types';
import toast from 'react-hot-toast';

const OrganizadorExcursoesPage: React.FC = () => {
  const router = useRouter();
  const [excursoes, setExcursoes] = useState<Excursao[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [excursaoToDelete, setExcursaoToDelete] = useState<string>('');

  useEffect(() => {
    loadExcursoes();
  }, [statusFilter]);

  const loadExcursoes = async () => {
    try {
      setLoading(true);
      const response = await excursoesService.listarExcursoes({
        status: statusFilter || undefined,
      });
      setExcursoes(response.data.content || []);
    } catch (error) {
      toast.error('Erro ao carregar excursões');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteExcursao = async () => {
    try {
      await excursoesService.excluirExcursao(excursaoToDelete);
      toast.success('Excursão excluída com sucesso!');
      loadExcursoes();
    } catch (error) {
      toast.error('Erro ao excluir excursão');
    }
  };

  const handleStatusChange = async (id: string, status: string) => {
    try {
      await excursoesService.alterarStatus(id, status);
      toast.success('Status atualizado com sucesso!');
      loadExcursoes();
    } catch (error) {
      toast.error('Erro ao alterar status');
    }
  };

  const filteredExcursoes = excursoes.filter(excursao =>
    excursao.titulo.toLowerCase().includes(searchTerm.toLowerCase()) ||
    excursao.destino.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      ATIVA: { color: 'bg-green-100 text-green-800', label: 'Ativa' },
      INATIVA: { color: 'bg-gray-100 text-gray-800', label: 'Inativa' },
      CANCELADA: { color: 'bg-red-100 text-red-800', label: 'Cancelada' },
      FINALIZADA: { color: 'bg-blue-100 text-blue-800', label: 'Finalizada' },
    };

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.ATIVA;
    
    return (
      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${config.color}`}>
        {config.label}
      </span>
    );
  };

  return (
    <Layout 
      showSidebar={true}
      title="Minhas Excursões"
      description="Gerencie suas excursões"
    >
      <div className="space-y-6">
        {/* Header Actions */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div className="flex items-center space-x-4 flex-1">
            {/* Search */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
              <input
                type="text"
                placeholder="Buscar excursões..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="form-input pl-10"
              />
            </div>

            {/* Status Filter */}
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="form-input w-auto"
            >
              <option value="">Todos os status</option>
              <option value="ATIVA">Ativa</option>
              <option value="INATIVA">Inativa</option>
              <option value="CANCELADA">Cancelada</option>
              <option value="FINALIZADA">Finalizada</option>
            </select>
          </div>

          <button
            onClick={() => router.push('/organizador/excursoes/nova')}
            className="btn-primary flex items-center"
          >
            <Plus className="h-4 w-4 mr-2" />
            Nova Excursão
          </button>
        </div>

        {/* Results */}
        {loading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, index) => (
              <div key={index} className="card p-6 animate-pulse">
                <div className="h-48 bg-gray-300 rounded-lg mb-4"></div>
                <div className="h-6 bg-gray-300 rounded mb-2"></div>
                <div className="h-4 bg-gray-300 rounded mb-4"></div>
                <div className="h-4 bg-gray-300 rounded w-1/2"></div>
              </div>
            ))}
          </div>
        ) : filteredExcursoes.length > 0 ? (
          <>
            <div className="flex items-center justify-between">
              <p className="text-gray-600">
                {filteredExcursoes.length} excursões encontradas
              </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
              {filteredExcursoes.map((excursao) => (
                <div key={excursao.id} className="card overflow-hidden">
                  {/* Image */}
                  <div className="relative h-48">
                    {excursao.imagens && excursao.imagens.length > 0 ? (
                      <img
                        src={excursao.imagens[0]}
                        alt={excursao.titulo}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full bg-gray-200 flex items-center justify-center">
                        <MapPin className="h-12 w-12 text-gray-400" />
                      </div>
                    )}
                    
                    {/* Status Badge */}
                    <div className="absolute top-3 left-3">
                      {getStatusBadge(excursao.status)}
                    </div>

                    {/* Actions Menu */}
                    <div className="absolute top-3 right-3">
                      <div className="relative group">
                        <button className="p-2 bg-white bg-opacity-90 rounded-full hover:bg-opacity-100 transition-all">
                          <MoreVertical className="h-4 w-4 text-gray-600" />
                        </button>
                        
                        <div className="absolute right-0 top-full mt-1 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-10 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all">
                          <button
                            onClick={() => router.push(`/excursoes/${excursao.id}`)}
                            className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                          >
                            <Eye className="h-4 w-4 mr-2" />
                            Visualizar
                          </button>
                          
                          <button
                            onClick={() => router.push(`/organizador/excursoes/${excursao.id}/editar`)}
                            className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                          >
                            <Edit className="h-4 w-4 mr-2" />
                            Editar
                          </button>

                          {excursao.status === 'ATIVA' && (
                            <button
                              onClick={() => handleStatusChange(excursao.id, 'INATIVA')}
                              className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                            >
                              Desativar
                            </button>
                          )}

                          {excursao.status === 'INATIVA' && (
                            <button
                              onClick={() => handleStatusChange(excursao.id, 'ATIVA')}
                              className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                            >
                              Ativar
                            </button>
                          )}
                          
                          <div className="border-t border-gray-100 my-1"></div>
                          
                          <button
                            onClick={() => {
                              setExcursaoToDelete(excursao.id);
                              setShowDeleteDialog(true);
                            }}
                            className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                          >
                            <Trash2 className="h-4 w-4 mr-2" />
                            Excluir
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Content */}
                  <div className="p-4">
                    <h3 className="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">
                      {excursao.titulo}
                    </h3>
                    
                    <div className="space-y-2 mb-4">
                      <div className="flex items-center text-sm text-gray-600">
                        <MapPin className="h-4 w-4 mr-2 text-gray-400" />
                        <span>{excursao.destino}</span>
                      </div>
                      
                      <div className="flex items-center text-sm text-gray-600">
                        <Calendar className="h-4 w-4 mr-2 text-gray-400" />
                        <span>{formatDate(excursao.dataIda)}</span>
                      </div>
                    </div>

                    {/* Stats */}
                    <div className="grid grid-cols-3 gap-4 py-3 border-t border-gray-100">
                      <div className="text-center">
                        <div className="text-lg font-semibold text-gray-900">
                          {excursao.vagasDisponiveis}
                        </div>
                        <div className="text-xs text-gray-600">Vagas</div>
                      </div>
                      
                      <div className="text-center">
                        <div className="text-lg font-semibold text-gray-900">
                          {excursao.vagasTotal - excursao.vagasDisponiveis}
                        </div>
                        <div className="text-xs text-gray-600">Inscritos</div>
                      </div>
                      
                      <div className="text-center">
                        <div className="text-lg font-semibold text-primary-600">
                          {formatCurrency(excursao.preco)}
                        </div>
                        <div className="text-xs text-gray-600">Preço</div>
                      </div>
                    </div>

                    {/* Actions */}
                    <div className="flex space-x-2 pt-3 border-t border-gray-100">
                      <button
                        onClick={() => router.push(`/organizador/excursoes/${excursao.id}`)}
                        className="btn-outline flex-1 text-sm"
                      >
                        Ver Detalhes
                      </button>
                      <button
                        onClick={() => router.push(`/organizador/excursoes/${excursao.id}/editar`)}
                        className="btn-primary flex-1 text-sm"
                      >
                        Editar
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </>
        ) : (
          <div className="text-center py-12">
            <MapPin className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              Nenhuma excursão encontrada
            </h3>
            <p className="text-gray-600 mb-4">
              {searchTerm || statusFilter
                ? 'Tente ajustar os filtros de busca.'
                : 'Comece criando sua primeira excursão.'}
            </p>
            {!searchTerm && !statusFilter && (
              <button
                onClick={() => router.push('/organizador/excursoes/nova')}
                className="btn-primary"
              >
                <Plus className="h-4 w-4 mr-2" />
                Criar Primeira Excursão
              </button>
            )}
          </div>
        )}
      </div>

      {/* Delete Confirmation Dialog */}
      <ConfirmDialog
        isOpen={showDeleteDialog}
        onClose={() => setShowDeleteDialog(false)}
        onConfirm={handleDeleteExcursao}
        title="Excluir Excursão"
        message="Tem certeza que deseja excluir esta excursão? Esta ação não pode ser desfeita."
        confirmText="Excluir"
        type="danger"
      />
    </Layout>
  );
};

export default OrganizadorExcursoesPage;

//pages/organizador/excursoes/nova.tsx
import React, { useState } from 'react';
import { useRouter } from 'next/router';
import { useForm } from 'react-hook-form';
import Layout from '../../../components/Layout';
import ImageUpload from '../../../components/Common/ImageUpload';
import { Calendar, MapPin, Clock, Users, DollarSign, FileText } from 'lucide-react';
import { excursoesService } from '../../../lib/api';
import toast from 'react-hot-toast';

interface ExcursaoForm {
  titulo: string;
  descricao: string;
  destino: string;
  dataIda: string;
  dataVolta?: string;
  horarioSaida: string;
  localSaida: string;
  preco: number;
  precoMenor?: number;
  vagasTotal: number;
  imagens: File[];
}

const NovaExcursaoPage: React.FC = () => {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [uploadedImages, setUploadedImages] = useState<File[]>([]);
  
  const { register, handleSubmit, watch, formState: { errors } } = useForm<ExcursaoForm>();

  const dataIda = watch('dataIda');

  const onSubmit = async (data: ExcursaoForm) => {
    setIsLoading(true);
    
    try {
      const formData = new FormData();
      
      // Append form fields
      Object.entries(data).forEach(([key, value]) => {
        if (key !== 'imagens' && value !== undefined && value !== '') {
          formData.append(key, value.toString());
        }
      });
      
      // Append images
      uploadedImages.forEach((image, index) => {
        formData.append('imagens', image);
      });

      await excursoesService.criarExcursao(formData);
      
      toast.success('Excursão criada com sucesso!');
      router.push('/organizador/excursoes');
    } catch (error: any) {
      toast.error(error.response?.data?.message || 'Erro ao criar excursão');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Layout 
      showSidebar={true}
      title="Nova Excursão"
      description="Crie uma nova excursão para seus clientes"
    >
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
        {/* Basic Information */}
        <div className="card p-6">
          <h3 className="section-title">Informações Básicas</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="md:col-span-2">
              <label className="form-label">
                <FileText className="inline h-4 w-4 mr-1" />
                Título da Excursão
              </label>
              <input
                type="text"
                className="form-input"
                placeholder="Ex: Excursão para Campos do Jordão"
                {...register('titulo', {
                  required: 'Título é obrigatório',
                  minLength: { value: 5, message: 'Título deve ter pelo menos 5 caracteres' },
                })}
              />
              {errors.titulo && (
                <p className="mt-1 text-sm text-red-600">{errors.titulo.message}</p>
              )}
            </div>

            <div>
              <label className="form-label">
                <MapPin className="inline h-4 w-4 mr-1" />
                Destino
              </label>
              <input
                type="text"
                className="form-input"
                placeholder="Ex: Campos do Jordão, SP"
                {...register('destino', {
                  required: 'Destino é obrigatório',
                })}
              />
              {errors.destino && (
                <p className="mt-1 text-sm text-red-600">{errors.destino.message}</p>
              )}
            </div>

            <div>
              <label className="form-label">Local de Saída</label>
              <input
                type="text"
                className="form-input"
                placeholder="Ex: Terminal Rodoviário de São Paulo"
                {...register('localSaida', {
                  required: 'Local de saída é obrigatório',
                })}
              />
              {errors.localSaida && (
                <p className="mt-1 text-sm text-red-600">{errors.localSaida.message}</p>
              )}
            </div>

            <div className="md:col-span-2">
              <label className="form-label">Descrição</label>
              <textarea
                rows={4}
                className="form-input"
                placeholder="Descreva os detalhes da excursão, o que está incluído, itinerário, etc."
                {...register('descricao', {
                  required: 'Descrição é obrigatória',
                  minLength: { value: 50, message: 'Descrição deve ter pelo menos 50 caracteres' },
                })}
              />
              {errors.descricao && (
                <p className="mt-1 text-sm text-red-600">{errors.descricao.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* Date and Time */}
        <div className="card p-6">
          <h3 className="section-title">Datas e Horários</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label className="form-label">
                <Calendar className="inline h-4 w-4 mr-1" />
                Data de Ida
              </label>
              <input
                type="date"
                className="form-input"
                min={new Date().toISOString().split('T')[0]}
                {...register('dataIda', {
                  required: 'Data de ida é obrigatória',
                })}
              />
              {errors.dataIda && (
                <p className="mt-1 text-sm text-red-600">{errors.dataIda.message}</p>
              )}
            </div>

            <div>
              <label className="form-label">
                <Calendar className="inline h-4 w-4 mr-1" />
                Data de Volta (Opcional)
              </label>
              <input
                type="date"
                className="form-input"
                min={dataIda}
                {...register('dataVolta')}
              />
            </div>

            <div>
              <label className="form-label">
                <Clock className="inline h-4 w-4 mr-1" />
                Horário de Saída
              </label>
              <input
                type="time"
                className="form-input"
                {...register('horarioSaida', {
                  required: 'Horário de saída é obrigatório',
                })}
              />
              {errors.horarioSaida && (
                <p className="mt-1 text-sm text-red-600">{errors.horarioSaida.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* Pricing and Capacity */}
        <div className="card p-6">
          <h3 className="section-title">Preços e Capacidade</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label className="form-label">
                <DollarSign className="inline h-4 w-4 mr-1" />
                Preço por Pessoa
              </label>
              <input
                type="number"
                step="0.01"
                min="0"
                className="form-input"
                placeholder="0,00"
                {...register('preco', {
                  required: 'Preço é obrigatório',
                  min: { value: 0.01, message: 'Preço deve ser maior que zero' },
                })}
              />
              {errors.preco && (
                <p className="mt-1 text-sm text-red-600">{errors.preco.message}</p>
              )}
            </div>

            <div>
              <label className="form-label">Preço Criança (Opcional)</label>
              <input
                type="number"
                step="0.01"
                min="0"
                className="form-input"
                placeholder="0,00"
                {...register('precoMenor', {
                  min: { value: 0, message: 'Preço deve ser maior ou igual a zero' },
                })}
              />
            </div>

            <div>
              <label className="form-label">
                <Users className="inline h-4 w-4 mr-1" />
                Total de Vagas
              </label>
              <input
                type="number"
                min="1"
                className="form-input"
                placeholder="50"
                {...register('vagasTotal', {
                  required: 'Total de vagas é obrigatório',
                  min: { value: 1, message: 'Deve ter pelo menos 1 vaga' },
                })}
              />
              {errors.vagasTotal && (
                <p className="mt-1 text-sm text-red-600">{errors.vagasTotal.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* Images */}
        <div className="card p-6">
          <h3 className="section-title">Imagens</h3>
          <ImageUpload
            images={uploadedImages}
            onImagesChange={setUploadedImages}
            maxImages={10}
          />
        </div>

        {/* Actions */}
        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={() => router.back()}
            className="btn-outline"
          >
            Cancelar
          </button>
          <button
            type="submit"
            disabled={isLoading}
            className="btn-primary"
          >
            {isLoading ? 'Criando...' : 'Criar Excursão'}
          </button>
        </div>
      </form>
    </Layout>
  );
};

export default NovaExcursaoPage;


//components/Common/ImageUpload.tsx
import React, { useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Upload, X, Image as ImageIcon } from 'lucide-react';

interface ImageUploadProps {
  images: File[];
  onImagesChange: (images: File[]) => void;
  maxImages?: number;
  maxSize?: number; // in MB
}

const ImageUpload: React.FC<ImageUploadProps> = ({
  images,
  onImagesChange,
  maxImages = 10,
  maxSize = 5
}) => {
  const onDrop = useCallback((acceptedFiles: File[]) => {
    const validFiles = acceptedFiles.filter(file => {
      const isValidSize = file.size <= maxSize * 1024 * 1024;
      const isValidType = file.type.startsWith('image/');
      
      if (!isValidSize) {
        alert(`${file.name} é muito grande. Máximo ${maxSize}MB.`);
        return false;
      }
      
      if (!isValidType) {
        alert(`${file.name} não é uma imagem válida.`);
        return false;
      }
      
      return true;
    });

    const totalImages = images.length + validFiles.length;
    if (totalImages > maxImages) {
      alert(`Máximo ${maxImages} imagens permitidas.`);
      return;
    }

    onImagesChange([...images, ...validFiles]);
  }, [images, maxImages, maxSize, onImagesChange]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png', '.webp']
    },
    multiple: true
  });

  const removeImage = (index: number) => {
    const newImages = images.filter((_, i) => i !== index);
    onImagesChange(newImages);
  };

  const getImagePreview = (file: File) => {
    return URL.createObjectURL(file);
  };

  return (
    <div className="space-y-4">
      {/* Upload Area */}
      <div
        {...getRootProps()}
        className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
          isDragActive
            ? 'border-primary-500 bg-primary-50'
            : 'border-gray-300 hover:border-gray-400'
        }`}
      >
        <input {...getInputProps()} />
        <Upload className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <div className="text-gray-600">
          {isDragActive ? (
            <p>Solte as imagens aqui...</p>
          ) : (
            <>
              <p className="text-lg font-medium mb-2">
                Clique ou arraste imagens para fazer upload
              </p>
              <p className="text-sm">
                Máximo {maxImages} imagens, até {maxSize}MB cada
              </p>
              <p className="text-xs text-gray-500 mt-1">
                Formatos: JPEG, PNG, WebP
              </p>
            </>
          )}
        </div>
      </div>

      {/* Image Preview Grid */}
      {images.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {images.map((image, index) => (
            <div key={index} className="relative group">
              <div className="relative aspect-square rounded-lg overflow-hidden bg-gray-100">
                <img
                  src={getImagePreview(image)}
                  alt={`Preview ${index + 1}`}
                  className="w-full h-full object-cover"
                />
                
                {/* Remove Button */}
                <button
                  onClick={() => removeImage(index)}
                  className="absolute top-2 right-2 p-1 bg-red-600 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-700"
                >
                  <X className="h-4 w-4" />
                </button>

                {/* Image Info */}
                <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white p-2 text-xs opacity-0 group-hover:opacity-100 transition-opacity">
                  <p className="truncate">{image.name}</p>
                  <p>{(image.size / 1024 / 1024).toFixed(2)} MB</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Upload Info */}
      <div className="text-sm text-gray-600">
        {images.length} de {maxImages} imagens carregadas
      </div>
    </div>
  );
};

export default ImageUpload;

//middleware.ts
import { withAuth } from 'next-auth/middleware';
import { NextResponse } from 'next/server';

export default withAuth(
  function middleware(req) {
    const token = req.nextauth.token;
    const { pathname } = req.nextUrl;

    // Allow access to public routes
    if (
      pathname.startsWith('/api/auth') ||
      pathname === '/' ||
      pathname.startsWith('/excursoes') ||
      pathname.startsWith('/sobre') ||
      pathname.startsWith('/contato') ||
      pathname.startsWith('/auth')
    ) {
      return NextResponse.next();
    }

    // Protect organizador routes
    if (pathname.startsWith('/organizador')) {
      if (!token) {
        return NextResponse.redirect(new URL('/auth/login', req.url));
      }
      
      if (token.userType !== 'ORGANIZADOR') {
        return NextResponse.redirect(new URL('/', req.url));
      }
    }

    // Protect cliente routes
    if (pathname.startsWith('/cliente')) {
      if (!token) {
        return NextResponse.redirect(new URL('/auth/login', req.url));
      }
      
      if (token.userType !== 'CLIENTE') {
        return NextResponse.redirect(new URL('/', req.url));
      }
    }

    return NextResponse.next();
  },
  {
    callbacks: {
      authorized: ({ token, req }) => {
        const { pathname } = req.nextUrl;
        
        // Allow public routes without authentication
        if (
          pathname.startsWith('/api/auth') ||
          pathname === '/' ||
          pathname.startsWith('/excursoes') ||
          pathname.startsWith('/sobre') ||
          pathname.startsWith('/contato') ||
          pathname.startsWith('/auth')
        ) {
          return true;
        }

        // Require authentication for protected routes
        return !!token;
      },
    },
  }
);

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};

//.env.example
# Database
NEXT_PUBLIC_API_URL=http://localhost:8080/api
NEXT_PUBLIC_APP_URL=http://localhost:3000

# NextAuth
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-nextauth-secret-here

# Google OAuth
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# Optional: Analytics
NEXT_PUBLIC_GA_ID=GA_MEASUREMENT_ID


//pages/auth/login.tsx
import React, { useState } from 'react';
import { signIn, getSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import Layout from '../../components/Layout';
import { Eye, EyeOff, MapPin } from 'lucide-react';
import toast from 'react-hot-toast';

interface LoginForm {
  email: string;
  password: string;
  userType: 'CLIENTE' | 'ORGANIZADOR';
}

const LoginPage: React.FC = () => {
  const router = useRouter();
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  const { register, handleSubmit, watch, formState: { errors } } = useForm<LoginForm>({
    defaultValues: {
      userType: 'CLIENTE',
    },
  });

  const userType = watch('userType');

  const onSubmit = async (data: LoginForm) => {
    setIsLoading(true);
    
    try {
      const result = await signIn('credentials', {
        email: data.email,
        password: data.password,
        userType: data.userType,
        redirect: false,
      });

      if (result?.error) {
        toast.error('Credenciais inválidas');
      } else {
        toast.success('Login realizado com sucesso!');
        
        // Redirecionar baseado no tipo de usuário
        const redirectUrl = data.userType === 'ORGANIZADOR' 
          ? '/organizador/dashboard' 
          : '/cliente/dashboard';
        
        router.push(redirectUrl);
      }
    } catch (error) {
      toast.error('Erro ao fazer login');
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleSignIn = () => {
    signIn('google', { callbackUrl: '/auth/complete-profile' });
  };

  return (
    <Layout>
      <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div>
            <div className="flex justify-center">
              <div className="bg-primary-600 rounded-lg p-3">
                <MapPin className="h-8 w-8 text-white" />
              </div>
            </div>
            <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
              Entre na sua conta
            </h2>
            <p className="mt-2 text-center text-sm text-gray-600">
              Ou{' '}
              <Link href="/auth/register" className="font-medium text-primary-600 hover:text-primary-500">
                crie uma nova conta
              </Link>
            </p>
          </div>

          <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
            <div className="space-y-4">
              {/* Tipo de Usuário */}
              <div>
                <label className="form-label">Tipo de Conta</label>
                <div className="grid grid-cols-2 gap-3">
                  <label className={`flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                    userType === 'CLIENTE' 
                      ? 'border-primary-600 bg-primary-50' 
                      : 'border-gray-300 hover:bg-gray-50'
                  }`}>
                    <input
                      type="radio"
                      value="CLIENTE"
                      {...register('userType', { required: true })}
                      className="sr-only"
                    />
                    <div className="flex items-center">
                      <div className={`w-4 h-4 rounded-full border-2 mr-2 flex items-center justify-center ${
                        userType === 'CLIENTE' ? 'border-primary-600' : 'border-gray-300'
                      }`}>
                        {userType === 'CLIENTE' && (
                          <div className="w-2 h-2 rounded-full bg-primary-600"></div>
                        )}
                      </div>
                      <span className="text-sm font-medium">Cliente</span>
                    </div>
                  </label>
                  
                  <label className={`flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                    userType === 'ORGANIZADOR' 
                      ? 'border-primary-600 bg-primary-50' 
                      : 'border-gray-300 hover:bg-gray-50'
                  }`}>
                    <input
                      type="radio"
                      value="ORGANIZADOR"
                      {...register('userType', { required: true })}
                      className="sr-only"
                    />
                    <div className="flex items-center">
                      <div className={`w-4 h-4 rounded-full border-2 mr-2 flex items-center justify-center ${
                        userType === 'ORGANIZADOR' ? 'border-primary-600' : 'border-gray-300'
                      }`}>
                        {userType === 'ORGANIZADOR' && (
                          <div className="w-2 h-2 rounded-full bg-primary-600"></div>
                        )}
                      </div>
                      <span className="text-sm font-medium">Organizador</span>
                    </div>
                  </label>
                </div>
              </div>

              {/* Email */}
              <div>
                <label htmlFor="email" className="form-label">
                  Email
                </label>
                <input
                  id="email"
                  type="email"
                  autoComplete="email"
                  className="form-input"
                  {...register('email', {
                    required: 'Email é obrigatório',
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                      message: 'Email inválido',
                    },
                  })}
                />
                {errors.email && (
                  <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
                )}
              </div>

              {/* Senha */}
              <div>
                <label htmlFor="password" className="form-label">
                  Senha
                </label>
                <div className="relative">
                  <input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    autoComplete="current-password"
                    className="form-input pr-10"
                    {...register('password', {
                      required: 'Senha é obrigatória',
                      minLength: {
                        value: 6,
                        message: 'Senha deve ter no mínimo 6 caracteres',
                      },
                    })}
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? (
                      <EyeOff className="h-5 w-5 text-gray-400" />
                    ) : (
                      <Eye className="h-5 w-5 text-gray-400" />
                    )}
                  </button>
                </div>
                {errors.password && (
                  <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
                )}
              </div>
            </div>

            {/* Esqueci a senha */}
            <div className="flex items-center justify-between">
              <div className="text-sm">
                <Link href="/auth/forgot-password" className="font-medium text-primary-600 hover:text-primary-500">
                  Esqueceu sua senha?
                </Link>
              </div>
            </div>

            {/* Botão de Submit */}
            <div>
              <button
                type="submit"
                disabled={isLoading}
                className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Entrando...' : 'Entrar'}
              </button>
            </div>

            {/* Divisor */}
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-gray-50 text-gray-500">Ou continue com</span>
              </div>
            </div>

            {/* Login com Google */}
            <div>
              <button
                type="button"
                onClick={handleGoogleSignIn}
                className="group relative w-full flex justify-center py-3 px-4 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
              >
                <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continuar com Google
              </button>
            </div>
          </form>
        </div>
      </div>
    </Layout>
  );
};

export default LoginPage;

//pages/auth/register.tsx
import React, { useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import { signIn } from 'next-auth/react';
import Layout from '../../components/Layout';
import { Eye, EyeOff, MapPin } from 'lucide-react';
import { authService } from '../../lib/api';
import toast from 'react-hot-toast';

interface RegisterForm {
  nome: string;
  email: string;
  password: string;
  confirmPassword: string;
  telefone: string;
  userType: 'CLIENTE' | 'ORGANIZADOR';
  nomeEmpresa?: string;
  cnpj?: string;
  acceptTerms: boolean;
}

const RegisterPage: React.FC = () => {
  const router = useRouter();
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  const { register, handleSubmit, watch, formState: { errors } } = useForm<RegisterForm>({
    defaultValues: {
      userType: 'CLIENTE',
    },
  });

  const userType = watch('userType');
  const password = watch('password');

  const onSubmit = async (data: RegisterForm) => {
    setIsLoading(true);
    
    try {
      if (data.userType === 'CLIENTE') {
        await authService.registerCliente({
          nome: data.nome,
          email: data.email,
          password: data.password,
          telefone: data.telefone,
        });
      } else {
        await authService.registerOrganizador({
          nome: data.nome,
          email: data.email,
          password: data.password,
          telefone: data.telefone,
          nomeEmpresa: data.nomeEmpresa!,
          cnpj: data.cnpj,
        });
      }

      toast.success('Conta criada com sucesso!');
      
      // Auto login após cadastro
      const result = await signIn('credentials', {
        email: data.email,
        password: data.password,
        userType: data.userType,
        redirect: false,
      });

      if (result?.error) {
        toast.error('Erro no login automático');
        router.push('/auth/login');
      } else {
        const redirectUrl = data.userType === 'ORGANIZADOR' 
          ? '/organizador/dashboard' 
          : '/cliente/dashboard';
        router.push(redirectUrl);
      }
    } catch (error: any) {
      toast.error(error.response?.data?.message || 'Erro ao criar conta');
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleSignIn = () => {
    signIn('google', { callbackUrl: '/auth/complete-profile' });
  };

  return (
    <Layout>
      <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div>
            <div className="flex justify-center">
              <div className="bg-primary-600 rounded-lg p-3">
                <MapPin className="h-8 w-8 text-white" />
              </div>
            </div>
            <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
              Crie sua conta
            </h2>
            <p className="mt-2 text-center text-sm text-gray-600">
              Ou{' '}
              <Link href="/auth/login" className="font-medium text-primary-600 hover:text-primary-500">
                entre na sua conta existente
              </Link>
            </p>
          </div>

          <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
            <div className="space-y-4">
              {/* Tipo de Usuário */}
              <div>
                <label className="form-label">Tipo de Conta</label>
                <div className="grid grid-cols-2 gap-3">
                  <label className={`flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                    userType === 'CLIENTE' 
                      ? 'border-primary-600 bg-primary-50' 
                      : 'border-gray-300 hover:bg-gray-50'
                  }`}>
                    <input
                      type="radio"
                      value="CLIENTE"
                      {...register('userType', { required: true })}
                      className="sr-only"
                    />
                    <div className="flex items-center">
                      <div className={`w-4 h-4 rounded-full border-2 mr-2 flex items-center justify-center ${
                        userType === 'CLIENTE' ? 'border-primary-600' : 'border-gray-300'
                      }`}>
                        {userType === 'CLIENTE' && (
                          <div className="w-2 h-2 rounded-full bg-primary-600"></div>
                        )}
                      </div>
                      <span className="text-sm font-medium">Cliente</span>
                    </div>
                  </label>
                  
                  <label className={`flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                    userType === 'ORGANIZADOR' 
                      ? 'border-primary-600 bg-primary-50' 
                      : 'border-gray-300 hover:bg-gray-50'
                  }`}>
                    <input
                      type="radio"
                      value="ORGANIZADOR"
                      {...register('userType', { required: true })}
                      className="sr-only"
                    />
                    <div className="flex items-center">
                      <div className={`w-4 h-4 rounded-full border-2 mr-2 flex items-center justify-center ${
                        userType === 'ORGANIZADOR' ? 'border-primary-600' : 'border-gray-300'
                      }`}>
                        {userType === 'ORGANIZADOR' && (
                          <div className="w-2 h-2 rounded-full bg-primary-600"></div>
                        )}
                      </div>
                      <span className="text-sm font-medium">Organizador</span>
                    </div>
                  </label>
                </div>
              </div>

              {/* Nome */}
              <div>
                <label htmlFor="nome" className="form-label">
                  Nome Completo
                </label>
                <input
                  id="nome"
                  type="text"
                  className="form-input"
                  {...register('nome', {
                    required: 'Nome é obrigatório',
                    minLength: {
                      value: 2,
                      message: 'Nome deve ter no mínimo 2 caracteres',
                    },
                  })}
                />
                {errors.nome && (
                  <p className="mt-1 text-sm text-red-600">{errors.nome.message}</p>
                )}
              </div>

              {/* Email */}
              <div>
                <label htmlFor="email" className="form-label">
                  Email
                </label>
                <input
                  id="email"
                  type="email"
                  autoComplete="email"
                  className="form-input"
                  {...register('email', {
                    required: 'Email é obrigatório',
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                      message: 'Email inválido',
                    },
                  })}
                />
                {errors.email && (
                  <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
                )}
              </div>

              {/* Telefone */}
              <div>
                <label htmlFor="telefone" className="form-label">
                  Telefone
                </label>
                <input
                  id="telefone"
                  type="tel"
                  className="form-input"
                  placeholder="(11) 99999-9999"
                  {...register('telefone', {
                    required: 'Telefone é obrigatório',
                  })}
                />
                {errors.telefone && (
                  <p className="mt-1 text-sm text-red-600">{errors.telefone.message}</p>
                )}
              </div>

              {/* Campos específicos do Organizador */}
              {userType === 'ORGANIZADOR' && (
                <>
                  <div>
                    <label htmlFor="nomeEmpresa" className="form-label">
                      Nome da Empresa
                    </label>
                    <input
                      id="nomeEmpresa"
                      type="text"
                      className="form-input"
                      {...register('nomeEmpresa', {
                        required: userType === 'ORGANIZADOR' ? 'Nome da empresa é obrigatório' : false,
                      })}
                    />
                    {errors.nomeEmpresa && (
                      <p className="mt-1 text-sm text-red-600">{errors.nomeEmpresa.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="cnpj" className="form-label">
                      CNPJ (Opcional)
                    </label>
                    <input
                      id="cnpj"
                      type="text"
                      className="form-input"
                      placeholder="00.000.000/0000-00"
                      {...register('cnpj')}
                    />
                  </div>
                </>
              )}

              {/* Senha */}
              <div>
                <label htmlFor="password" className="form-label">
                  Senha
                </label>
                <div className="relative">
                  <input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    className="form-input pr-10"
                    {...register('password', {
                      required: 'Senha é obrigatória',
                      minLength: {
                        value: 6,
                        message: 'Senha deve ter no mínimo 6 caracteres',
                      },
                    })}
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? (
                      <EyeOff className="h-5 w-5 text-gray-400" />
                    ) : (
                      <Eye className="h-5 w-5 text-gray-400" />
                    )}
                  </button>
                </div>
                {errors.password && (
                  <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
                )}
              </div>

              {/* Confirmar Senha */}
              <div>
                <label htmlFor="confirmPassword" className="form-label">
                  Confirmar Senha
                </label>
                <div className="relative">
                  <input
                    id="confirmPassword"
                    type={showConfirmPassword ? 'text' : 'password'}
                    className="form-input pr-10"
                    {...register('confirmPassword', {
                      required: 'Confirmação de senha é obrigatória',
                      validate: value => value === password || 'Senhas não coincidem',
                    })}
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  >
                    {showConfirmPassword ? (
                      <EyeOff className="h-5 w-5 text-gray-400" />
                    ) : (
                      <Eye className="h-5 w-5 text-gray-400" />
                    )}
                  </button>
                </div>
                {errors.confirmPassword && (
                  <p className="mt-1 text-sm text-red-600">{errors.confirmPassword.message}</p>
                )}
              </div>

              {/* Termos */}
              <div className="flex items-center">
                <input
                  id="acceptTerms"
                  type="checkbox"
                  className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                  {...register('acceptTerms', {
                    required: 'Você deve aceitar os termos de uso',
                  })}
                />
                <label htmlFor="acceptTerms" className="ml-2 block text-sm text-gray-900">
                  Aceito os{' '}
                  <Link href="/termos" className="text-primary-600 hover:text-primary-500">
                    termos de uso
                  </Link>{' '}
                  e{' '}
                  <Link href="/privacidade" className="text-primary-600 hover:text-primary-500">
                    política de privacidade
                  </Link>
                </label>
              </div>
              {errors.acceptTerms && (
                <p className="mt-1 text-sm text-red-600">{errors.acceptTerms.message}</p>
              )}
            </div>

            {/* Botão de Submit */}
            <div>
              <button
                type="submit"
                disabled={isLoading}
                className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Criando conta...' : 'Criar conta'}
              </button>
            </div>

            {/* Divisor */}
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-gray-50 text-gray-500">Ou continue com</span>
              </div>
            </div>

            {/* Login com Google */}
            <div>
              <button
                type="button"
                onClick={handleGoogleSignIn}
                className="group relative w-full flex justify-center py-3 px-4 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
              >
                <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continuar com Google
              </button>
            </div>
          </form>
        </div>
      </div>
    </Layout>
  );
};

export default RegisterPage;

//pages/auth/complete-profile.tsx
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useForm } from 'react-hook-form';
import Layout from '../../components/Layout';
import { MapPin } from 'lucide-react';
import { authService } from '../../lib/api';
import toast from 'react-hot-toast';

interface CompleteProfileForm {
  userType: 'CLIENTE' | 'ORGANIZADOR';
  telefone: string;
  nomeEmpresa?: string;
  cnpj?: string;
}

const CompleteProfilePage: React.FC = () => {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [userInfo, setUserInfo] = useState<{
    email: string;
    name: string;
    image?: string;
  } | null>(null);
  
  const { register, handleSubmit, watch, formState: { errors } } = useForm<CompleteProfileForm>({
    defaultValues: {
      userType: 'CLIENTE',
    },
  });

  const userType = watch('userType');

  useEffect(() => {
    // Get user info from URL params
    const { email, name, image } = router.query;
    
    if (email && name) {
      setUserInfo({
        email: email as string,
        name: name as string,
        image: image as string,
      });
    }
  }, [router.query]);

  const onSubmit = async (data: CompleteProfileForm) => {
    if (!userInfo) {
      toast.error('Informações do usuário não encontradas');
      return;
    }

    setIsLoading(true);
    
    try {
      await authService.completeGoogleProfile({
        email: userInfo.email,
        nome: userInfo.name,
        avatar: userInfo.image,
        tipoUsuario: data.userType,
        telefone: data.telefone,
        nomeEmpresa: data.nomeEmpresa,
        cnpj: data.cnpj,
      });

      toast.success('Perfil completado com sucesso!');
      
      // Redirecionar baseado no tipo de usuário
      const redirectUrl = data.userType === 'ORGANIZADOR' 
        ? '/organizador/dashboard' 
        : '/cliente/dashboard';
      
      router.push(redirectUrl);
    } catch (error: any) {
      toast.error(error.response?.data?.message || 'Erro ao completar perfil');
    } finally {
      setIsLoading(false);
    }
  };

  if (!userInfo) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Carregando...
            </h2>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div>
            <div className="flex justify-center">
              <div className="bg-primary-600 rounded-lg p-3">
                <MapPin className="h-8 w-8 text-white" />
              </div>
            </div>
            <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
              Complete seu perfil
            </h2>
            <p className="mt-2 text-center text-sm text-gray-600">
              Olá, {userInfo.name}! Precisamos de mais algumas informações.
            </p>
          </div>

          <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
            <div className="space-y-4">
              {/* Tipo de Usuário */}
              <div>
                <label className="form-label">Tipo de Conta</label>
                <div className="grid grid-cols-2 gap-3">
                  <label className={`flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                    userType === 'CLIENTE' 
                      ? 'border-primary-600 bg-primary-50' 
                      : 'border-gray-300 hover:bg-gray-50'
                  }`}>
                    <input
                      type="radio"
                      value="CLIENTE"
                      {...register('userType', { required: true })}
                      className="sr-only"
                    />
                    <div className="flex items-center">
                      <div className={`w-4 h-4 rounded-full border-2 mr-2 flex items-center justify-center ${
                        userType === 'CLIENTE' ? 'border-primary-600' : 'border-gray-300'
                      }`}>
                        {userType === 'CLIENTE' && (
                          <div className="w-2 h-2 rounded-full bg-primary-600"></div>
                        )}
                      </div>
                      <span className="text-sm font-medium">Cliente</span>
                    </div>
                  </label>
                  
                  <label className={`flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                    userType === 'ORGANIZADOR' 
                      ? 'border-primary-600 bg-primary-50' 
                      : 'border-gray-300 hover:bg-gray-50'
                  }`}>
                    <input
                      type="radio"
                      value="ORGANIZADOR"
                      {...register('userType', { required: true })}
                      className="sr-only"
                    />
                    <div className="flex items-center">
                      <div className={`w-4 h-4 rounded-full border-2 mr-2 flex items-center justify-center ${
                        userType === 'ORGANIZADOR' ? 'border-primary-600' : 'border-gray-300'
                      }`}>
                        {userType === 'ORGANIZADOR' && (
                          <div className="w-2 h-2 rounded-full bg-primary-600"></div>
                        )}
                      </div>
                      <span className="text-sm font-medium">Organizador</span>
                    </div>
                  </label>
                </div>
              </div>

              {/* Telefone */}
              <div>
                <label htmlFor="telefone" className="form-label">
                  Telefone
                </label>
                <input
                  id="telefone"
                  type="tel"
                  className="form-input"
                  placeholder="(11) 99999-9999"
                  {...register('telefone', {
                    required: 'Telefone é obrigatório',
                  })}
                />
                {errors.telefone && (
                  <p className="mt-1 text-sm text-red-600">{errors.telefone.message}</p>
                )}
              </div>

              {/* Campos específicos do Organizador */}
              {userType === 'ORGANIZADOR' && (
                <>
                  <div>
                    <label htmlFor="nomeEmpresa" className="form-label">
                      Nome da Empresa
                    </label>
                    <input
                      id="nomeEmpresa"
                      type="text"
                      className="form-input"
                      {...register('nomeEmpresa', {
                        required: userType === 'ORGANIZADOR' ? 'Nome da empresa é obrigatório' : false,
                      })}
                    />
                    {errors.nomeEmpresa && (
                      <p className="mt-1 text-sm text-red-600">{errors.nomeEmpresa.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="cnpj" className="form-label">
                      CNPJ (Opcional)
                    </label>
                    <input
                      id="cnpj"
                      type="text"
                      className="form-input"
                      placeholder="00.000.000/0000-00"
                      {...register('cnpj')}
                    />
                  </div>
                </>
              )}
            </div>

            {/* Botão de Submit */}
            <div>
              <button
                type="submit"
                disabled={isLoading}
                className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Completando perfil...' : 'Finalizar cadastro'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </Layout>
  );
};

export default CompleteProfilePage;